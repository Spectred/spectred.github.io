import{_ as n,V as d,W as i,$ as e,a0 as o,Y as r,Z as c,F as t}from"./framework-7404058e.js";const p={},s=e("h1",{id:"spring",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#spring","aria-hidden":"true"},"#"),o(" Spring")],-1),l=e("img",{src:"https://spring.io/images/spring-logo-2022-dark-2f10e8055653ec50e693eb444291d742.svg",alt:"",loading:"lazy"},null,-1),h={href:"https://spring.io/",target:"_blank",rel:"noopener noreferrer"},g=e("h2",{id:"_1-spring全家桶中有哪些项目",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-spring全家桶中有哪些项目","aria-hidden":"true"},"#"),o(" 1. Spring全家桶中有哪些项目?")],-1),u={href:"https://spring.io/projects",target:"_blank",rel:"noopener noreferrer"},b=c(`<p><code>Spring Framework</code> (一般<code>Spring Framework</code>简称为<code>spring</code>)、<code>Spring Boot</code>、<code>Spring Cloud</code>、<code>Spring Data</code>、<code>Spring Security</code>、<code>Spring Batch</code>、<code>Spring Session</code>等</p><h2 id="_2-spring有哪些模块组成" tabindex="-1"><a class="header-anchor" href="#_2-spring有哪些模块组成" aria-hidden="true">#</a> 2. Spring有哪些模块组成</h2><p><code>core</code>、<code>context</code>、<code>beans</code>、<code>AOP</code> 、<code>ORM</code>、<code>WebMVC</code></p><h2 id="_3-spring中用到了哪些设计模式" tabindex="-1"><a class="header-anchor" href="#_3-spring中用到了哪些设计模式" aria-hidden="true">#</a> 3. Spring中用到了哪些设计模式</h2><p>工厂模式(<code>BeanFactory</code>)，单例/原型模式(bean的作用域)，代理模式(AOP),适配器模式，装饰器模式，观察者模式(事件监听)，策略模式(实例化对象)，模板模式(JdbcTemplate)，组合模式</p><h2 id="_4-ioc容器是什么-如何实现简单的ioc容器-在spring中的实现方式是什么-和di有什么区别" tabindex="-1"><a class="header-anchor" href="#_4-ioc容器是什么-如何实现简单的ioc容器-在spring中的实现方式是什么-和di有什么区别" aria-hidden="true">#</a> 4. IoC容器是什么，如何实现简单的IoC容器，在Spring中的实现方式是什么，和DI有什么区别</h2><p>IoC,控制反转，将对象实例化和管理的权利交给了容器，可以通过反射+工厂模式实现简单的IoC容器;</p><p>在Spring中有<code>DI</code>(依赖注入)和<code>DL</code>（依赖查找）两种实现方式，<code>DI</code>可以通过xml配置文件、注解驱动(<code>@Value</code>/<code>@Autowired</code>/<code>@Inject</code>/<code>@Resource</code>)、借助<code>Aware</code>系列接口等方式实现，而<code>DL</code>指的是如<code>getBean(),ofType(),withAnnotation</code>等方式从IoC容器中获取bean;</p><p>IoC和DI区别在于角度的不同，在<strong>对象的角度</strong>，IoC将对象实例化和管理的权利交给了容器，在<strong>容器的角度</strong>,容器将对象依赖的其他对象注入</p><h2 id="_5-beanfactory、applicationcontext、factorybean的区别" tabindex="-1"><a class="header-anchor" href="#_5-beanfactory、applicationcontext、factorybean的区别" aria-hidden="true">#</a> 5. <code>BeanFactory</code>、<code>ApplicationContext</code>、<code>FactoryBean</code>的区别</h2><p><code>BeanFactory</code>是一个Spring框架自己使用的提供了抽象的配置和对象的管理机制的接口;</p><p><code>ApplicationContext</code>是<code>BeanFactory</code>的子接口(准确的说是<code>BeanFactory</code>子接口<code>ListableBeanFactory</code>和<code>HierarchicalBeanFactory</code>的子接口)，扩展了许多功能如: 生命周期的管理，事件机制和消息与国际化等等，具体的，类<code>GenericApplicationContext</code>实现了<code>ApplicationContext</code>,也采用组合模式使用了<code>DefaultListableBeanFactory</code>;</p><p><code>FactoryBean</code>则是创建对象的工厂Bean，可以使用它来创建一些初始化流程复杂的对象</p><h2 id="_6-bean的生命周期" tabindex="-1"><a class="header-anchor" href="#_6-bean的生命周期" aria-hidden="true">#</a> 6. Bean的生命周期</h2><ol><li>从XML配置或者注解配置中获取<code>BeanDefinition</code>,描述了bean的元信息，包括累信息、属性、行为和依赖关系等</li><li>实例化Bean，并设置属性</li><li>调用<code>Aware</code>方法(如果实现了<code>BeanNameAware</code>,<code>BeanFactoryAware</code>,<code>ApplicationContextAware</code>等接口)</li><li>后置处理器的预处理方法 （<code>BeanPostProcessor.postPreocessBeforeInitialization</code>）</li><li>初始化Bean (包含两步: 实现<code>InitializingBean.afterPropertiesSet</code>和自定义的初始化方法)</li><li>后置处理器的后处理方法 （<code>BeanPostProcessor.postPreocessAfterInitialization</code>）</li><li>bean使用后的销毁方法 (包含两步: <code>DisposableBean.destroy</code>和自定义的销毁方法)</li></ol><h2 id="_7-spring-的作用域-依赖注入方式-自动装配方式" tabindex="-1"><a class="header-anchor" href="#_7-spring-的作用域-依赖注入方式-自动装配方式" aria-hidden="true">#</a> 7. Spring 的作用域，依赖注入方式，自动装配方式</h2><h3 id="_7-1-作用域scope" tabindex="-1"><a class="header-anchor" href="#_7-1-作用域scope" aria-hidden="true">#</a> 7.1 作用域Scope</h3><p>单例，原型，<code>Request</code>,<code>Session</code>,<code>Global Session</code></p><h3 id="_7-2-依赖注入方式" tabindex="-1"><a class="header-anchor" href="#_7-2-依赖注入方式" aria-hidden="true">#</a> 7.2 依赖注入方式</h3><p>构造注入，setter注入，静态工厂注入(<code>factory-method</code>)，实例工厂注入(<code>factory-bean</code>)</p><h3 id="_7-3-自动装配方式" tabindex="-1"><a class="header-anchor" href="#_7-3-自动装配方式" aria-hidden="true">#</a> 7.3 自动装配方式</h3><p>no,<code>byName</code>,<code>byType</code>,<code>constructor</code>,<code>auto</code>（auto下先constructor后byType）</p><h2 id="_8-spring如何解决循环依赖" tabindex="-1"><a class="header-anchor" href="#_8-spring如何解决循环依赖" aria-hidden="true">#</a> 8. Spring如何解决循环依赖</h2><p>循环依赖指的是两个bean中存在相互依赖引用，如A.b=B,B.a=A，可以分为构造器的循环依赖和Field属性的循环依赖(setter注入)</p><p>构造器注入的循环依赖无法解决，只能抛出异常，</p><p>对于属性注入的循环依赖，Spring采用三级缓存提前暴露对象的方法解决，在IoC容器中有所谓的&quot;三级缓存&quot;，分别是</p><p>一级: <code>ConcurrentHashMap singletonObjects</code>,二级: <code>HashMap earlySingletonObjects</code>,三级: <code>HashMap singletonFactries</code>，</p><ol><li>A在实例化后将自己放入三级缓存</li><li>B创建过程中发现依赖A,按照一级&gt;二级&gt;三级缓存的顺序在三级缓存中找到A，并将A从三级移动到二级缓存</li><li>B创建完成，将B移动到一级缓存</li><li>A按照一级&gt;二级&gt;三级缓存的顺序在一级缓存中找到B，完成了A和B两个bean的创建</li></ol><p>在实际中，也可以通过<code>@Lazy</code>延迟注入的方式解决循环依赖，但是最好不要有循环依赖</p><ul><li><p>为什么构造注入不行？</p><p>因为需要先实例化放入三级缓存，如果循环依赖在构造注入中则完不成实例化</p></li><li><p>为什么需要三级缓存，二级是否能满足要求?</p><p>二级缓存可以满足解决循环依赖的要求，增加到三级缓存时为了三级升二级缓存时可以扩展，主要应用在AOP代理上</p></li></ul><h2 id="_9-什么是aop-spring中aop有哪些通知类型-大概怎么使用-有哪些使用场景-有哪些失效场景-底层原理是怎样的" tabindex="-1"><a class="header-anchor" href="#_9-什么是aop-spring中aop有哪些通知类型-大概怎么使用-有哪些使用场景-有哪些失效场景-底层原理是怎样的" aria-hidden="true">#</a> 9. 什么是AOP,Spring中AOP有哪些通知类型,大概怎么使用,有哪些使用场景,有哪些失效场景,底层原理是怎样的？</h2><h3 id="_9-1-aop概述" tabindex="-1"><a class="header-anchor" href="#_9-1-aop概述" aria-hidden="true">#</a> 9.1 AOP概述</h3><p>AOP是在不修改代码的前提下，使用运行时动态代理对代码增强</p><h3 id="_9-2-spring中aop有哪些通知类型" tabindex="-1"><a class="header-anchor" href="#_9-2-spring中aop有哪些通知类型" aria-hidden="true">#</a> 9.2 Spring中AOP有哪些通知类型</h3><p>前置通知，后置通知，返回后通知，异常通知，环绕通知</p><h3 id="_9-3-大概怎么使用" tabindex="-1"><a class="header-anchor" href="#_9-3-大概怎么使用" aria-hidden="true">#</a> 9.3 大概怎么使用</h3><p>引入依赖，定义切面类(通过<code>@Aspect</code>或者.aj文件)，指定切点，编写通知方法，通过切点获取相应信息处理逻辑</p><h3 id="_9-4-有哪些使用场景" tabindex="-1"><a class="header-anchor" href="#_9-4-有哪些使用场景" aria-hidden="true">#</a> 9.4 有哪些使用场景</h3><p>事务控制<code>@Transcational</code>，权限校验，日志切面，数据缓存等</p><h3 id="_9-5-有哪些失效场景-transactional有哪些失效场景" tabindex="-1"><a class="header-anchor" href="#_9-5-有哪些失效场景-transactional有哪些失效场景" aria-hidden="true">#</a> 9.5 有哪些失效场景/<code>@Transactional</code>有哪些失效场景</h3><ul><li>作为AOP，是要生成动态代理，如果采用<code>private</code>修饰，或者作用在接口上但是使用<code>CGLib</code>动态代理，或者调用自身另一个有事务控制的方法都会失效</li><li>作为注解内容本身，要对异常捕获后才能处理事务回滚，默认捕获<code>RuntimeException</code>,如果没有指定异常类型或者指定的异常不包含(如抛出Exception)，或者捕获异常后没有再抛出 ，都会导致<code>Transactional</code>失效</li></ul><h3 id="_9-6-底层原理是怎样-简述" tabindex="-1"><a class="header-anchor" href="#_9-6-底层原理是怎样-简述" aria-hidden="true">#</a> 9.6 底层原理是怎样(简述)？</h3><p>借助后置处理器，在bean初始化的过程中，将目标对象包装为代理对象。代理对象构造后，执行方法进入到代理类中依次执行织入通知</p><p>Spring中可以选择JDK中的<code>Proxy</code>或者<code>CGLib</code>进行动态代理，两者的区别：JDK代理至少需要实现一个接口，创建快执行慢，<code>CGLib</code>属于字节码增强，创建慢执行快</p><blockquote><p>有哪些字节码增强的方式: <code>ASM</code>,<code>Javaassist</code>,<code>Byte-Buddy</code></p></blockquote><h2 id="_10-spring事务的传播行为有哪些" tabindex="-1"><a class="header-anchor" href="#_10-spring事务的传播行为有哪些" aria-hidden="true">#</a> 10. Spring事务的传播行为有哪些</h2><blockquote><p><code>org.springframework.transaction.TransactionDefinition</code></p></blockquote><ul><li><code>PROPAGATION_REQUIRED</code> 当前没事务则开启新事务；当前有事务则运行在当前事务中</li><li><code>PROPAGATION_SUPPORTS</code> 当前没事务则不创建事务；当前有事务则运行在当前事务中</li><li><code>PROPAGATION_MANDATORY</code> 当前必须运行在事务中，没有则抛出异常</li><li><code>PROPAGATION_REQUIRES_NEW</code> 当前没事务则开启新事物；当前有事务则将原事务暂停，重新开启新事务，新事务完毕后再将原事务释放</li><li><code>PROPAGATION_NOT_SUPPORTED</code> 当前没事务则不在事务中运行；当前有事务则将事务暂停</li><li><code>PROPAGATION_NEVER</code> 不允许运行在事务中，有事务则抛出异常</li><li><code>PROPAGATION_NESTED</code> 当前没事务则开启新事务；当前有事务则记录一个保存点，并继续运行在当前事务，如果子事务出现异常则是回滚到上一个保存点</li></ul><h2 id="_11-简述spring-mvc的工作流程-拦截器、过滤器有什么区别" tabindex="-1"><a class="header-anchor" href="#_11-简述spring-mvc的工作流程-拦截器、过滤器有什么区别" aria-hidden="true">#</a> 11. 简述Spring MVC的工作流程，拦截器、过滤器有什么区别</h2><h3 id="_11-1-spring-mvc的工作流程" tabindex="-1"><a class="header-anchor" href="#_11-1-spring-mvc的工作流程" aria-hidden="true">#</a> 11.1 Spring MVC的工作流程</h3><p>请求发送到<code>DispatcherServlet</code>,通过<code>HandlerMapping</code>返回处理器执行链<code>HandlerExecutionChain</code>,通过<code>HandlerAdapter</code>执行<code>Handler</code>返回<code>ModelAndView</code>,<code>DispatcherServlet</code>再通过视图解析器得到视图，响应给调用方</p><h4 id="_11-2-拦截器和过滤器的区别" tabindex="-1"><a class="header-anchor" href="#_11-2-拦截器和过滤器的区别" aria-hidden="true">#</a> 11.2 拦截器和过滤器的区别</h4><p>两者都是AOP从编程思想的体现，都能实现权限检查、日志记录等，不同的是:</p><ul><li>使用范围不同，过滤器是<code>Servlet</code>规范规定的，只用于web程序；而拦截器也可以用在应用程序中</li><li>规范不同，过滤器是<code>Servlet</code>容器支持的，而拦截器是在Spring容器内的</li><li>使用的资源不同,拦截器是Spring的组件可以使用Spring的资源，而过滤器不能</li><li>作用范围不同: 过滤器只在<code>Servlet</code>前后起作用，而拦截器可以在方法前后、异常抛出前后。优先使用拦截器</li></ul><h2 id="_12-spring-boot比springmvc好在哪-为什么使用springboot" tabindex="-1"><a class="header-anchor" href="#_12-spring-boot比springmvc好在哪-为什么使用springboot" aria-hidden="true">#</a> 12. Spring Boot比SpringMVC好在哪(为什么使用SpringBoot)？</h2><p>Starter依赖整合，自动配置，内嵌web容器可独立运行，可监控，趋向微服务，可容器化</p><h2 id="_13-spring-boot如何实现自动配置" tabindex="-1"><a class="header-anchor" href="#_13-spring-boot如何实现自动配置" aria-hidden="true">#</a> 13. Spring Boot如何实现自动配置</h2><p>个人认为重点在<code>@Import</code>和<code>SPI</code>机制</p><p>通过启动类中的main方法的<code>SpringApplication.run(Xx.class, args);</code>调用后，会获取到启动类上的组合注解<code>@SpringBootApplication</code>,</p><p>其中<code>@EnableAutoConfiguration</code>向下可追溯到<code>@Import({AutoConfigurationImportSelector.class})</code>,</p><p>在对应的类中通过<code>SPI</code>(<code>SpringFactoriesLoader.loadXxx</code>)机制，加载<code>META-INF/spring.factories</code>中的类，</p><p>通过<code>@Conditional</code>来过滤需要的配置类，</p><p>然后调用Spring的<code>ConfigurableApplicationContext#refresh</code>方法将bean装配的容器</p><h2 id="_14-spring-boot如何自定义starter" tabindex="-1"><a class="header-anchor" href="#_14-spring-boot如何自定义starter" aria-hidden="true">#</a> 14. Spring Boot如何自定义starter</h2><p>引入<code>spring-boot-autoconfigure</code>依赖，编写对应的Bean(<code>EnableConfigurationProperties</code>,<code>ConfigurationProperties</code>),编写配置类<code>Configuration</code>,编写</p><p><code> resources/META-INF/spring.factories</code>如</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token value attr-value">\\
  com.spectred.config.MyAutoConfiguration</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用时引入对应的starter,注入对应的bean</p><h2 id="_15-spring-cloud有哪些组件" tabindex="-1"><a class="header-anchor" href="#_15-spring-cloud有哪些组件" aria-hidden="true">#</a> 15. Spring Cloud有哪些组件</h2><blockquote><p>目前有Spring Cloud Netlix，Spring Cloud Alibaba ,Spring Cloud Tencent，当前主流的是Spring Cloud Alibaba</p></blockquote><p><strong>服务注册中心</strong>: Eureka , <strong>Nacos</strong></p><p><strong>客户端负载均衡</strong>: Ribbon , DubboLB, <strong>Spring Cloud Loadbalancer</strong></p><p>API<strong>网关</strong>: Zuul , <strong>Spring Cloud Gateway</strong></p><p><strong>熔断器</strong>: Hystrix , <strong>Sentinel</strong></p><p><strong>配置中心</strong>: Spring Cloud Config , <strong>Nacos</strong></p><p><strong>服务调用</strong>: Feign , <strong>Dubbo</strong></p><p><strong>消息驱动</strong>: <strong>Spring Cloud Stream</strong></p><p><strong>链路追踪</strong>: <strong>Spring Cloud Sleuth/Zipkin</strong>，<strong>SkyWalking</strong></p><p><strong>分布式事务</strong>: <strong>Seata</strong></p>`,79);function _(S,f){const a=t("ExternalLinkIcon");return d(),i("div",null,[s,e("blockquote",null,[e("p",null,[l,e("a",h,[o("spring.io"),r(a)])])]),g,e("blockquote",null,[e("p",null,[e("a",u,[o("spring projects"),r(a)])])]),b])}const x=n(p,[["render",_],["__file","spring.html.vue"]]);export{x as default};
