import{_ as i,V as o,W as c,Z as n,$ as a,X as e,a4 as t,F as p}from"./framework-b6120433.js";const l={},d=t(`<h1 id="锁" tabindex="-1"><a class="header-anchor" href="#锁" aria-hidden="true">#</a> 锁</h1><figure><img src="https://s2.loli.net/2023/01/30/bd4GTk58g1HjmUI.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="_1-内置锁-synchronized" tabindex="-1"><a class="header-anchor" href="#_1-内置锁-synchronized" aria-hidden="true">#</a> 1. 内置锁 <code>synchronized</code></h2><p>Java提供了内置锁机制来支持原子性、可见性和有序性。</p><p>每个Java对象都可以用作一个实现同步的锁，这些锁被称为内置锁（Intrinsic Lock）或监视器锁（Monitor Lock）。线程在进入同步代码块之前会自动获得锁，并且在退出同步代码块时（正常退出或异常退出）自动释放锁。</p><p>Java的内置锁相当于一种互斥锁，最多只有一个线程能持有这种锁。当线程A尝试获取一个由线程B持有的锁时，线程A必须等待或阻塞，直到线程B释放这个锁。如果B永远不释放锁，那么A将永远等下去。</p><h3 id="_1-1-synchronized的使用" tabindex="-1"><a class="header-anchor" href="#_1-1-synchronized的使用" aria-hidden="true">#</a> 1.1 <code>synchronized</code>的使用</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 普通同步方法，锁是当前实例对象</span>
<span class="token punctuation">}</span>

<span class="token comment">// 等价于</span>
<span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 静态同步方法，锁是当前类的Class对象</span>
<span class="token punctuation">}</span>

<span class="token comment">// 等价于</span>
<span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">synchronized</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 同步方法块，锁是括号里配置的对象</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),r={class:"hint-container info"},u=n("p",{class:"hint-container-title"},"临界区",-1),k={href:"https://en.wikipedia.org/wiki/Critical_section",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>使用<code>synchronized</code>确保多线程安全访问共享资源的代码示例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SynchronizedExample</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>example<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Thread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>example<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            thread1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            thread2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Count: &quot;</span> <span class="token operator">+</span> example<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-对象的内存布局" tabindex="-1"><a class="header-anchor" href="#_1-2-对象的内存布局" aria-hidden="true">#</a> 1.2 对象的内存布局</h3><p>Java对象在对内存中的存储布局划分为三个部分: 对象头（Object Header）、实例数据（Instance Data）和对齐填充（Padding）。例如:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 这个对象在内存中的总大小是32个字节。
Object Header（8 bytes）    # 对象头占用了8个字节
    Mark Word（4 bytes）
    Class Pointer（4 bytes）
Instance Data（16 bytes）   # 实例数据占用了16个字节
    int field1（4 bytes）   # 由一个int类型
    long field2（8 bytes）  # 一个long类型
    Object Reference field3（4 bytes）  # 个Object类型组成
Padding（8 bytes）					# 为了保证对象在内存中的地址是8的倍数，虚拟机添加了8个字节的填充
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-1-对象头" tabindex="-1"><a class="header-anchor" href="#_1-2-1-对象头" aria-hidden="true">#</a> 1.2.1 对象头</h4><p>HotSpot虚拟机对象的对象头部分包括两类信息:</p>`,7),h=n("strong",null,"Mark Word",-1),m={href:"https://github.com/openjdk/jdk/blob/jdk-17-ga/src/hotspot/share/oops/markWord.hpp",target:"_blank",rel:"noopener noreferrer"},b=t('<details class="hint-container details"><summary>markWord</summary><p>The markWord describes the header of an object.</p><p>Bit-format of an object header (most significant first, big endian layout below):</p><p>32 bits:</p><p>--------</p><p>​ hash:25 ------------&gt;| age:4 biased_lock:1 lock:2 (normal object)</p><p>​ JavaThread*:23 epoch:2 age:4 biased_lock:1 lock:2 (biased object)</p><p>64 bits:</p><p>--------</p><p>unused:25 hash:31 --&gt;| unused_gap:1 age:4 biased_lock:1 lock:2 (normal object)</p><p>JavaThread*:54 epoch:2 unused_gap:1 age:4 biased_lock:1 lock:2 (biased object)</p><p>- hash contains the identity hash value: largest value is 31 bits, see os::random().</p><p>​ Also, 64-bit vm&#39;s require a hash value no bigger than 32 bits because they will not properly generate a mask larger than that: see library_call.cpp</p><p>- the biased lock pattern is used to bias a lock toward a given thread.</p><p>​ When this pattern is set in the low three bits, the lock is either biased toward a given thread or &quot;anonymously&quot; biased,</p><p>​ indicating that it is possible for it to be biased.</p><p>​ When the lock is biased toward a given thread, locking and unlocking can be performed by that thread without using atomic operations.</p><p>​ When a lock&#39;s bias is revoked, it reverts back to the normal locking scheme described below.</p><p>​ Note that we are overloading the meaning of the &quot;unlocked&quot; state of the header.</p><p>​ Because we steal a bit from the age we can guarantee that the bias pattern will never be seen for a truly unlocked object.</p><p>​ Note also that the biased state contains the age bits normally contained in the object header.</p><p>​ Large increases in scavenge times were seen when these bits were absent and an arbitrary age assigned to all biased objects,</p><p>​ because they tended to consume a significant fraction of the eden semispaces and were not promoted promptly,</p><p>​ causing an increase in the amount of copying performed.</p><p>​ The runtime system aligns all JavaThread* pointers to a very large value (currently 128 bytes (32bVM) or 256 bytes (64bVM))</p><p>​ to make room for the age bits &amp; the epoch bits (used in support of biased locking).</p><p>​ [JavaThread* | epoch | age | 1 | 01] lock is biased toward given thread</p><p>​ [0 | epoch | age | 1 | 01] lock is anonymously biased</p><p>- the two lock bits are used to describe three states: locked/unlocked and monitor.</p><p>​ [ptr | 00] locked ptr points to real header on stack</p><p>​ [header | 0 | 01] unlocked regular object header</p><p>​ [ptr | 10] monitor inflated lock (header is wapped out)</p><p>​ [ptr | 11] marked used to mark an object</p><p>​ [0 ............ 0| 00] inflating inflation in progress</p><p>​ We assume that stack/thread pointers have the lowest two bits cleared.</p><p>- INFLATING() is a distinguished markword value of all zeros that is used when inflating an existing stack-lock into an ObjectMonitor.</p><p>​ See below for is_being_inflated() and INFLATING().</p></details><figure><img src="https://s2.loli.net/2023/02/23/OmH3FRYujgBaJ7W.png" alt="图来自: 《深入理解Java虚拟机》13.3 锁优化)" tabindex="0" loading="lazy"><figcaption>图来自: 《深入理解Java虚拟机》13.3 锁优化)</figcaption></figure><p>第二类是<strong>类型指针</strong>，即对象指向它的类型原数据的指针，Java虚拟机通过这个指针来确定该对象是哪个类的实例</p><h4 id="_1-2-2-实例数据" tabindex="-1"><a class="header-anchor" href="#_1-2-2-实例数据" aria-hidden="true">#</a> 1.2.2 实例数据</h4><p>对象真正存储的有效信息，即在程序代码里所定义的各种类型的字段内容</p><h4 id="_1-2-3-对齐填充" tabindex="-1"><a class="header-anchor" href="#_1-2-3-对齐填充" aria-hidden="true">#</a> 1.2.3 对齐填充</h4><p>不是必然存在的，没有特别的含义，仅仅起占位符的作用</p><p>HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，任何对象的大小都必须是8字节的整数倍，如果对象实例数据部分没有对齐，就需要通过对齐填充来补全</p>',8),g={class:"hint-container info"},_=n("p",{class:"hint-container-title"},"JOL",-1),y=n("strong",null,"JOL",-1),f={href:"https://github.com/openjdk/jol",target:"_blank",rel:"noopener noreferrer"},w=t('<h3 id="_1-3-锁升级" tabindex="-1"><a class="header-anchor" href="#_1-3-锁升级" aria-hidden="true">#</a> 1.3 锁升级</h3><p>锁升级(或锁膨胀)指的是在多线程并发访问时，根据竞争情况将锁状态逐渐升级，包括: 无锁 -&gt; 偏向锁 -&gt; 轻量级锁 -&gt; 重量级锁。锁可以升级但不能降级(目的是为了提高获得锁和释放锁的效率)</p><h4 id="_1-3-1-无锁" tabindex="-1"><a class="header-anchor" href="#_1-3-1-无锁" aria-hidden="true">#</a> 1.3.1 无锁</h4><p>当一个线程访问一个没有被锁定的对象时，它会尝试使用CAS操作（Compare And Swap）来获取对象的锁。如果CAS操作成功，则表示该线程获得了对象的锁，此时对象处于无锁状态</p><h4 id="_1-3-2-偏向锁" tabindex="-1"><a class="header-anchor" href="#_1-3-2-偏向锁" aria-hidden="true">#</a> 1.3.2 偏向锁</h4>',5),j={href:"https://github.com/openjdk/jdk/blob/jdk-17-ga/src/hotspot/share/runtime/biasedLocking.hpp",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,"如果一个线程多次访问一个对象，并且其他线程没有竞争该对象的锁，那么该对象会被标记为偏向锁状态。这时，当该线程再次访问该对象时，就不需要CAS操作来获取锁了，而是直接获取该对象的锁。",-1),L=n("p",null,[a("假设当前虚拟机启动了偏向锁（-XX: +UseBiasedLocking）,那么当锁对象第一次被线程获取的时候，虚拟机将会把对象头中的标志位设置为"),n("code",null,"01"),a(",把偏向模式设置为"),n("code",null,"1"),a(",表示进入偏向模式。同时使用CAS操作把获取到这个锁的线程ID记录在对象的MardWord中。如果CAS成功，持有偏向锁的线程以后每次进入这个锁相关的同步块是，虚拟机都可以不再进行任何通过操作(如加锁、解锁和对MarkWord的更新)。")],-1),z=n("p",null,[a("偏向锁在Java6和Java7里是默认启用的(准确的说是Java6到Java14)，但是在应用启动几秒中之后才激活，如有必要可以使用JVM参数来关闭延迟: "),n("code",null,"-XX:BiasedLockingStartupDelay=0"),a("。如果确定应用程序里所有的锁通常情况下处于竞争状态，可以通过JVM参数关闭偏向锁: "),n("code",null,"-XX:-UseBiasedLocking=false"),a("，那么程序默认会进入轻量级锁状态。")],-1),C={class:"hint-container tip"},S=n("p",{class:"hint-container-title"},"提示",-1),I={href:"https://openjdk.org/jeps/374",target:"_blank",rel:"noopener noreferrer"},J=t(`<h4 id="_1-3-3-轻量级锁" tabindex="-1"><a class="header-anchor" href="#_1-3-3-轻量级锁" aria-hidden="true">#</a> 1.3.3 轻量级锁</h4><p>如果一个线程尝试获取一个对象的锁，但该对象已经被另一个线程获取了锁，那么该线程会将对象的锁升级为轻量级锁状态。升级为轻量级锁状态后，该线程会在自己的线程栈中申请一块空间作为锁记录（Lock Record），并将对象的Mark Word指向该锁记录的地址。此时，线程通过CAS操作更新对象的Mark Word，将其指向自己的锁记录，以获取对象的锁。（线程尝试使用CAS将MarkWord替换为只想锁记录的指针，如果成功，当前线程获得锁，如果失败，表示其他线程竞争锁，当前线程便擦灰姑娘是使用自旋来获取锁）</p><h4 id="_1-3-4-重量级锁" tabindex="-1"><a class="header-anchor" href="#_1-3-4-重量级锁" aria-hidden="true">#</a> 1.3.4 重量级锁</h4><p>如果一个对象的轻量级锁升级失败，即多个线程竞争同一个锁，那么该锁会升级为重量级锁状态（如轻量级锁自旋达到设定的次数）。重量级锁是一种基于操作系统的锁，它使用操作系统的互斥量来实现锁的竞争，相对于前面的三种锁级别，重量级锁的竞争强度更高，但开销也更大</p><div class="hint-container note"><p class="hint-container-title">锁优化</p><p>锁优化还包括 自旋锁与自适应锁、锁消除、锁粗化</p></div><h3 id="_1-4-原理" tabindex="-1"><a class="header-anchor" href="#_1-4-原理" aria-hidden="true">#</a> 1.4 原理</h3><p><code>synchronized</code>的原理是通过对象头的 Mark Word 和操作系统的互斥量实现</p><p>在源码中的实现如下：</p><p>对于同步代码块,<code>monitorenter</code>和<code>monitorexit</code>分别对应加锁和解锁操作</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// synchronized code block</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译后的字节码</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0: aload_1
1: dup
2: astore_2
3: monitorenter    // 加锁
4: aload_2
5: monitorexit     // 解锁
6: goto 14
9: astore_3
10: aload_2
11: monitorexit    // 解锁
12: aload_3
13: athrow
14: return
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于同步方法，使用ACC_SYNCHRONIZED标志来表示该方法是一个同步方法，进入该方法时会自动获取对象监视器（或称为锁），方法执行完成后会自动释放锁。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// synchronized method</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译后的字节码:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public synchronized void method();
    descriptor: ()V
    flags: ACC_PUBLIC, ACC_SYNCHRONIZED   // ACC_SYNCHRONIZED标志
    Code:
      stack=0, locals=1, args_size=1
         0: return
      LineNumberTable:
        line 7: 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),A={class:"hint-container info"},M=n("p",{class:"hint-container-title"},"在JVM源码中的实现",-1),N={href:"https://github.com/openjdk/jdk/blob/master/src/hotspot/share/runtime/objectMonitor.hpp",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/openjdk/jdk/blob/jdk-17-ga/src/hotspot/share/runtime/objectMonitor.cpp",target:"_blank",rel:"noopener noreferrer"},R=n("h2",{id:"_2-显式锁-lock",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-显式锁-lock","aria-hidden":"true"},"#"),a(" 2. 显式锁 "),n("code",null,"Lock")],-1),W=n("p",null,"锁时用来控制多个线程访问共享资源的方式，一般来说一个锁能够防止多个线程同时访问共享资源。",-1),E=n("p",null,[a("Java中提供了: "),n("code",null,"java.util.concurrent.locks.Lock"),a("接口作为显式锁，与内置加锁机制不同的是，Lock提供了一种无条件的、可轮询的、定时的以及可中断的锁获取操作，所有加锁和解锁方法都是显式的、在Lock的实现中必须提供与内部锁相同的内存可见性语义，但在加锁语义、调度算法和顺序保证以及性能特性等方面可以有所不同。")],-1),O={id:"_2-1-lock",tabindex:"-1"},V=n("a",{class:"header-anchor",href:"#_2-1-lock","aria-hidden":"true"},"#",-1),B={href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/concurrent/locks/Lock.html",target:"_blank",rel:"noopener noreferrer"},D=t(`<h4 id="_2-1-1-lock的使用方式" tabindex="-1"><a class="header-anchor" href="#_2-1-1-lock的使用方式" aria-hidden="true">#</a> 2.1.1 Lock的使用方式:</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Lock</span> l <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>  
l<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">try</span> <span class="token punctuation">{</span>    
  <span class="token comment">// access the resource protected by this lock  </span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    
  l<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">注意</p><p>在<code>finally</code>中释放锁，保证在获取锁之后，最终能够被释放</p><p>不要将获取锁的过程写在<code>try</code>中，因为如果在获取锁(自定义锁的实现)时发生了异常，抛出异常的同时也会导致锁无故释放</p></div><h4 id="_2-1-2-lock比synchronized提供了更多的功能性" tabindex="-1"><a class="header-anchor" href="#_2-1-2-lock比synchronized提供了更多的功能性" aria-hidden="true">#</a> 2.1.2 Lock比<code>synchronized</code>提供了更多的功能性:</h4><ul><li><code>tryLock()</code>: 非阻塞尝试获取锁</li><li><code>tryLock(long, TimeUnit)</code>: 可超时尝试获取锁</li><li><code>lockInterruptibly()</code>: 可中断尝试获取锁</li></ul><h4 id="_2-1-3-lock的api" tabindex="-1"><a class="header-anchor" href="#_2-1-3-lock的api" aria-hidden="true">#</a> 2.1.3 Lock的API</h4><div class="language-JAVA line-numbers-mode" data-ext="JAVA"><pre class="language-JAVA"><code>public interface Lock {

    /**
     * 获取锁
     * 调用该方法当前线程将会获取锁，获锁成功后从该方法返回
     */
    void lock();

    /**
     * 可中断地获取锁
     * 该方法会响应中断，即在锁的获取中可以终端当前线程
     */
    void lockInterruptibly() throws InterruptedException;

    /**
     * 尝试非阻塞的获取锁
     * 调用该方法护立刻返回，如果能够获取则返回true,否则返回false
     * &lt;p&gt;
     * 典型用法:
     * &lt;pre&gt; {@code
     * Lock lock = ...;
     * if (lock.tryLock()) {
     *   try {
     *     // manipulate protected state
     *   } finally {
     *     lock.unlock();
     *   }
     * } else {
     *   // perform alternative actions
     * }}&lt;/pre&gt;
     */
    boolean tryLock();

    /**
     * 超时的获取锁，当前线程在以下3种情况下会返回:
     * - 当前线程在超时时间内 获得锁
     * - 当前线程在超时时间内 被中断
     * - 超时时间结束，返回false
     */
    boolean tryLock(long time, TimeUnit unit) throws InterruptedException;

    /**
     * 释放锁
     */
    void unlock();

    /**
     * 获取Condition
     * 该Condition和当前锁绑定，当前线程只有获得了锁，才能调用Condition的wait()方法，而调用后，当前线程将释放锁
     */
    Condition newCondition();
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),H={id:"_2-2-reentrantlock",tabindex:"-1"},q=n("a",{class:"header-anchor",href:"#_2-2-reentrantlock","aria-hidden":"true"},"#",-1),F={href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/concurrent/locks/ReentrantLock.html",target:"_blank",rel:"noopener noreferrer"},U=t(`<p>ReentrantLock，重入锁，表示该锁能够支持一个线程对资源的重复加锁，任意线程在获取锁之后能够再次获取该锁而不会被锁阻塞，该特性的实现需要解决以下两个问题</p><ol><li><p>线程再次获取锁</p><p>锁需要去识别获取锁的线程是否为当前占据锁的线程，如果是则再次成功获取</p></li><li><p>锁的最终释放</p><p>线程重复n次获取锁，随后在第n次释放该锁后，其他线程能够获取该锁</p></li></ol><h4 id="_2-2-1-轮询锁与定时锁" tabindex="-1"><a class="header-anchor" href="#_2-2-1-轮询锁与定时锁" aria-hidden="true">#</a> 2.2.1 轮询锁与定时锁</h4><p>轮询锁和定时锁的获取模式是由<code>tryLock</code>方法实现。</p><p>正确的使用可以避免死锁的发生: 如果不能获得所有需要的锁，那么可以使用可定时的或可轮询的锁获取方式，从而是的重新获得控制权，它会释放已经获得的锁，然后重新尝试获取所有锁。</p><p>定时锁的实例: 带有时间限制的加锁</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 尝试获取锁，等待1秒</span>
        <span class="token comment">// 获取锁成功后的代码逻辑</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取锁失败后的处理逻辑</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理线程中断异常</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放锁</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-2-可中断的锁获取操作" tabindex="-1"><a class="header-anchor" href="#_2-2-2-可中断的锁获取操作" aria-hidden="true">#</a> 2.2.2 可中断的锁获取操作</h4><p>可中断的锁获取操作能在可取消的操作中使用加锁，<code>lockInterruptibly()</code>方法能够在获得锁的同时保持对中断的响应，并且由于它包含在Lock中，因此无需创建其他类型的不可中断阻塞机制。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 尝试获取锁，并响应线程的中断请求</span>
    <span class="token comment">// 获取锁成功后的代码逻辑</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理线程中断异常</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放锁</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-3-非块结构的加锁" tabindex="-1"><a class="header-anchor" href="#_2-2-3-非块结构的加锁" aria-hidden="true">#</a> 2.2.3 非块结构的加锁</h4><p>内置锁是对一个块结构进行加锁，ReentrantLock是非块结构进行加锁</p><h4 id="_2-2-4-公平性" tabindex="-1"><a class="header-anchor" href="#_2-2-4-公平性" aria-hidden="true">#</a> 2.2.4 公平性</h4><p>可以通过构造函数传参来决定ReentrantLock的公平性，默认是非公平锁</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中FairSync和NonfairSync都继承自内部类Sync，Sync继承AbstractQueuedSynchronizer</p><p>公平锁和非公平锁的实现都是独占的，调用了AQS的setExclusiveOwnerThread方法，都是排他锁。</p><p>公平锁：线程将按照他们发出请求的顺序来获得锁</p><p>非公平锁：当一个线程请求非公平锁时，如果在发出请求的同时该锁的状态变为可用，那么这个线程将跳过队列中所有的等待线程并获得这个锁</p><p>::: warn 公平锁</p><p>对于公平锁，可轮询的tryLock仍然会“插队”</p><p>:::</p><p>::: warn 为什么ReentrantLock默认是非公平锁</p><p>非公平模式效率更高，因为非公平模式会在一开始就尝试两次获取锁，如果当时正好state是0，那么它就会成功获取锁，少了排队导致的阻塞/唤醒过程，并且减少了线程频繁的切换带来的性能损耗</p><p>但是非公平锁有可能导致一开始排队的线程一直获取不到锁，导致线程饿死</p><p>:::</p><h4 id="_2-2-5-synchronized和reentrantlock的选择" tabindex="-1"><a class="header-anchor" href="#_2-2-5-synchronized和reentrantlock的选择" aria-hidden="true">#</a> 2.2.5 <code>synchronized</code>和<code>ReentrantLock</code>的选择</h4><p><strong>功能</strong>上: 优先使用<code>synchronized</code>，如果无法满足需求，需要一些高级功能时使用<code>ReentrantLock</code>,高级功能包括:</p><ul><li><p>可轮询的、可定时的 （tryLock）</p></li><li><p>可中断的锁获取操作 （lockInterruptibly）</p></li><li><p>公平队列 （FairSync）</p></li><li><p>非块结构的锁</p></li></ul><p><strong>性能</strong>上: 优先选择<code>synchronized</code></p><p>因为<code>synchronized</code>是JVM的内置属性，能执行一些优化，例如对线程封闭的锁对象的锁消除优化，通过加锁的粒度来消除内置锁</p>`,31);function X(P,G){const s=p("ExternalLinkIcon");return o(),c("div",null,[d,n("div",r,[u,n("p",null,[n("a",k,[a("临界区"),e(s)]),a("指的是某一块在同一时刻只能由一个线程执行的代码区域")])]),v,n("p",null,[a("第一类是用于存储对象自身的运行时数据，如哈希码、GC分代年龄，锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等，称为"),h,a("。在JDK17中 "),n("a",m,[a("markWord.hpp"),e(s)]),a("中描述如下")]),b,n("div",g,[_,n("p",null,[y,a(" (Java Object Layout) 是分析对象内存布局的工具。详情点击: "),n("a",f,[a("openjdk/jol"),e(s)])])]),w,n("blockquote",null,[n("p",null,[n("a",j,[a("biasedLocking.hpp"),e(s)])])]),x,L,z,n("div",C,[S,n("p",null,[a("偏向锁在Java15中废弃，参考: "),n("a",I,[a("jeps-374"),e(s)])])]),J,n("div",A,[M,n("p",null,[n("a",N,[a("objectMonitor.hpp"),e(s)])]),n("p",null,[n("a",T,[a("objectMonitor.cpp"),e(s)])])]),R,W,E,n("h3",O,[V,a(" 2.1 "),n("a",B,[a("Lock"),e(s)])]),D,n("h3",H,[q,a(" 2.2 "),n("a",F,[a("ReentrantLock"),e(s)])]),U])}const Z=i(l,[["render",X],["__file","locks.html.vue"]]);export{Z as default};
