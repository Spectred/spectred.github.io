import{_ as o,V as p,W as c,Z as n,$ as a,X as e,a4 as t,F as i}from"./framework-b6120433.js";const l={},r=t(`<h1 id="锁" tabindex="-1"><a class="header-anchor" href="#锁" aria-hidden="true">#</a> 锁</h1><figure><img src="https://s2.loli.net/2023/01/30/bd4GTk58g1HjmUI.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="_1-内置锁-synchronized" tabindex="-1"><a class="header-anchor" href="#_1-内置锁-synchronized" aria-hidden="true">#</a> 1. 内置锁 <code>synchronized</code></h2><p>Java提供了内置锁机制来支持原子性、可见性和有序性。</p><p>每个Java对象都可以用作一个实现同步的锁，这些锁被称为内置锁（Intrinsic Lock）或监视器锁（Monitor Lock）。线程在进入同步代码块之前会自动获得锁，并且在退出同步代码块时（正常退出或异常退出）自动释放锁。</p><p>Java的内置锁相当于一种互斥锁，最多只有一个线程能持有这种锁。当线程A尝试获取一个由线程B持有的锁时，线程A必须等待或阻塞，直到线程B释放这个锁。如果B永远不释放锁，那么A将永远等下去。</p><h3 id="_1-1-synchronized的使用" tabindex="-1"><a class="header-anchor" href="#_1-1-synchronized的使用" aria-hidden="true">#</a> 1.1 <code>synchronized</code>的使用</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 普通同步方法，锁是当前实例对象</span>
<span class="token punctuation">}</span>

<span class="token comment">// 等价于</span>
<span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 静态同步方法，锁是当前类的Class对象</span>
<span class="token punctuation">}</span>

<span class="token comment">// 等价于</span>
<span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">synchronized</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 同步方法块，锁是括号里配置的对象</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),u={class:"hint-container info"},d=n("p",{class:"hint-container-title"},"临界区",-1),k={href:"https://en.wikipedia.org/wiki/Critical_section",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>使用<code>synchronized</code>确保多线程安全访问共享资源的代码示例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SynchronizedExample</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>example<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Thread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>example<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            thread1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            thread2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Count: &quot;</span> <span class="token operator">+</span> example<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-对象的内存布局" tabindex="-1"><a class="header-anchor" href="#_1-2-对象的内存布局" aria-hidden="true">#</a> 1.2 对象的内存布局</h3><p>Java对象在对内存中的存储布局划分为三个部分: 对象头（Object Header）、实例数据（Instance Data）和对齐填充（Padding）。例如:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 这个对象在内存中的总大小是32个字节。
Object Header（8 bytes）    # 对象头占用了8个字节
    Mark Word（4 bytes）
    Class Pointer（4 bytes）
Instance Data（16 bytes）   # 实例数据占用了16个字节
    int field1（4 bytes）   # 由一个int类型
    long field2（8 bytes）  # 一个long类型
    Object Reference field3（4 bytes）  # 个Object类型组成
Padding（8 bytes）					# 为了保证对象在内存中的地址是8的倍数，虚拟机添加了8个字节的填充
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-1-对象头" tabindex="-1"><a class="header-anchor" href="#_1-2-1-对象头" aria-hidden="true">#</a> 1.2.1 对象头</h4><p>HotSpot虚拟机对象的对象头部分包括两类信息:</p>`,7),v=n("strong",null,"Mark Word",-1),b={href:"https://github.com/openjdk/jdk/blob/jdk-17-ga/src/hotspot/share/oops/markWord.hpp",target:"_blank",rel:"noopener noreferrer"},m=t('<div class="hint-container info"><p class="hint-container-title">markWord</p><p>The markWord describes the header of an object.</p><p>Bit-format of an object header (most significant first, big endian layout below):</p><p>32 bits:</p><p>--------</p><p>​ hash:25 ------------&gt;| age:4 biased_lock:1 lock:2 (normal object)</p><p>​ JavaThread*:23 epoch:2 age:4 biased_lock:1 lock:2 (biased object)</p><p>64 bits:</p><p>--------</p><p>unused:25 hash:31 --&gt;| unused_gap:1 age:4 biased_lock:1 lock:2 (normal object)</p><p>JavaThread*:54 epoch:2 unused_gap:1 age:4 biased_lock:1 lock:2 (biased object)</p><p>- hash contains the identity hash value: largest value is 31 bits, see os::random().</p><p>​ Also, 64-bit vm&#39;s require a hash value no bigger than 32 bits because they will not properly generate a mask larger than that: see library_call.cpp</p><p>- the biased lock pattern is used to bias a lock toward a given thread.</p><p>​ When this pattern is set in the low three bits, the lock is either biased toward a given thread or &quot;anonymously&quot; biased,</p><p>​ indicating that it is possible for it to be biased.</p><p>​ When the lock is biased toward a given thread, locking and unlocking can be performed by that thread without using atomic operations.</p><p>​ When a lock&#39;s bias is revoked, it reverts back to the normal locking scheme described below.</p><p>​ Note that we are overloading the meaning of the &quot;unlocked&quot; state of the header.</p><p>​ Because we steal a bit from the age we can guarantee that the bias pattern will never be seen for a truly unlocked object.</p><p>​ Note also that the biased state contains the age bits normally contained in the object header.</p><p>​ Large increases in scavenge times were seen when these bits were absent and an arbitrary age assigned to all biased objects,</p><p>​ because they tended to consume a significant fraction of the eden semispaces and were not promoted promptly,</p><p>​ causing an increase in the amount of copying performed.</p><p>​ The runtime system aligns all JavaThread* pointers to a very large value (currently 128 bytes (32bVM) or 256 bytes (64bVM))</p><p>​ to make room for the age bits &amp; the epoch bits (used in support of biased locking).</p><p>​ [JavaThread* | epoch | age | 1 | 01] lock is biased toward given thread</p><p>​ [0 | epoch | age | 1 | 01] lock is anonymously biased</p><p>- the two lock bits are used to describe three states: locked/unlocked and monitor.</p><p>​ [ptr | 00] locked ptr points to real header on stack</p><p>​ [header | 0 | 01] unlocked regular object header</p><p>​ [ptr | 10] monitor inflated lock (header is wapped out)</p><p>​ [ptr | 11] marked used to mark an object</p><p>​ [0 ............ 0| 00] inflating inflation in progress</p><p>​ We assume that stack/thread pointers have the lowest two bits cleared.</p><p>- INFLATING() is a distinguished markword value of all zeros that is used when inflating an existing stack-lock into an ObjectMonitor.</p><p>​ See below for is_being_inflated() and INFLATING().</p></div><p>第二类是<strong>类型指针</strong>，即对象指向它的类型原数据的指针，Java虚拟机通过这个指针来确定该对象是哪个类的实例</p><h4 id="_1-2-2-实例数据" tabindex="-1"><a class="header-anchor" href="#_1-2-2-实例数据" aria-hidden="true">#</a> 1.2.2 实例数据</h4><p>对象真正存储的有效信息，即在程序代码里所定义的各种类型的字段内容</p><h4 id="_1-2-3-对齐填充" tabindex="-1"><a class="header-anchor" href="#_1-2-3-对齐填充" aria-hidden="true">#</a> 1.2.3 对齐填充</h4><p>不是必然存在的，没有特别的含义，仅仅起占位符的作用</p><p>HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，任何对象的大小都必须是8字节的整数倍，如果对象实例数据部分没有对齐，就需要通过对齐填充来补全</p><h3 id="_1-3-锁升级" tabindex="-1"><a class="header-anchor" href="#_1-3-锁升级" aria-hidden="true">#</a> 1.3 锁升级</h3><h3 id="_1-4-原理" tabindex="-1"><a class="header-anchor" href="#_1-4-原理" aria-hidden="true">#</a> 1.4 原理</h3>',9),g={href:"https://github.com/openjdk/jdk/blob/jdk-17-ga/src/hotspot/share/runtime/objectMonitor.cpp",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/openjdk/jdk/blob/master/src/hotspot/share/runtime/objectMonitor.hpp",target:"_blank",rel:"noopener noreferrer"},f=n("h2",{id:"_2-显示锁-lock",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-显示锁-lock","aria-hidden":"true"},"#"),a(" 2. 显示锁 "),n("code",null,"Lock ")],-1);function _(w,j){const s=i("ExternalLinkIcon");return p(),c("div",null,[r,n("div",u,[d,n("p",null,[n("a",k,[a("临界区"),e(s)]),a("指的是某一块在同一时刻只能由一个线程执行的代码区域")])]),h,n("p",null,[a("第一类是用于存储对象自身的运行时数据，如哈希码、GC分代年龄，锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等，称为"),v,a("。在JDK17中 "),n("a",b,[a("markWord.hpp"),e(s)]),a("中描述如下")]),m,n("p",null,[n("a",g,[a("objectMonitor.cpp"),e(s)])]),n("p",null,[n("a",y,[a("objectMonitor"),e(s)])]),f])}const z=o(l,[["render",_],["__file","locks.html.vue"]]);export{z as default};
