import{_ as a,V as n,W as s,a4 as e}from"./framework-b6120433.js";const t={},p=e(`<h1 id="directbytebuffer" tabindex="-1"><a class="header-anchor" href="#directbytebuffer" aria-hidden="true">#</a> DirectByteBuffer</h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><p>DirectByteBuffer扩展了 ByteBuffer ，表示一个字节缓冲区，该缓冲区<strong>在 Java 堆之外分配</strong>，这个区域称为“<strong>直接缓冲区</strong>”。</p><p>DirectByteBuffer 提供了一种访问不受 Java 虚拟机 (JVM) 管理的内存区域的方式，这可以为某些类型的操作提供更好的性能，例如文件 I/O 或网络通信。它们通常用于需要直接访问内存的情况，例如与本地代码进行接口调用或执行 I/O 操作时。</p><p>使用 DirectByteBuffer 的主要好处之一是可以直接将它们传递给本地方法，而无需进行任何复制或转换。这可以帮助减少 JVM 和本地代码之间数据传输的开销，从而提高性能。</p><p>要创建一个 DirectByteBuffer，可以使用 ByteBuffer 类的 allocateDirect() 方法，该方法将返回一个直接缓冲区。</p><p>DirectByteBuffer在许多中间件中都有使用,如Netty、Kafka、ES、Hadoop</p><p>DirectByteBuffer源码中使用到了Unsafe</p><p>（在Java高版本好像移除了这个类，待查...）</p><h2 id="_2-使用" tabindex="-1"><a class="header-anchor" href="#_2-使用" aria-hidden="true">#</a> 2. 使用</h2><h3 id="_2-1-使用-bytebuffer-类的-allocatedirect-方法创建-directbytebuffer-对象" tabindex="-1"><a class="header-anchor" href="#_2-1-使用-bytebuffer-类的-allocatedirect-方法创建-directbytebuffer-对象" aria-hidden="true">#</a> 2.1 使用 ByteBuffer 类的 allocateDirect() 方法创建 DirectByteBuffer 对象</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建一个大小为 1024 字节的 DirectByteBuffer 对象</span>
<span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-将数据写入-directbytebuffer-中" tabindex="-1"><a class="header-anchor" href="#_2-2-将数据写入-directbytebuffer-中" aria-hidden="true">#</a> 2.2 将数据写入 DirectByteBuffer 中</h3><p>使用 put() 方法将数据写入缓冲区。例如，以下代码将一个字节数组写入 DirectByteBuffer 中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-从-directbytebuffer-中读取数据" tabindex="-1"><a class="header-anchor" href="#_2-3-从-directbytebuffer-中读取数据" aria-hidden="true">#</a> 2.3 从 DirectByteBuffer 中读取数据</h3><p>使用 get() 方法从缓冲区中读取数据。例如，以下代码从缓冲区中读取数据并将其转换为字符串</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>buffer<span class="token punctuation">.</span><span class="token function">remaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
buffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-清除缓冲区" tabindex="-1"><a class="header-anchor" href="#_2-4-清除缓冲区" aria-hidden="true">#</a> 2.4 清除缓冲区</h3><p>使用 clear() 方法清除缓冲区。例如，以下代码清除 DirectByteBuffer 缓冲区中的数据：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">内存需要手动释放</p><p>DirectByteBuffer通过虚引用(Phantom Reference)来实现堆外内存的释放，不受Java垃圾回收器的管理，因此需要手动释放。可以使用 Cleaner 类来释放 DirectByteBuffer 对象所使用的内存。例如，以下代码释放 DirectByteBuffer 对象占用的内存：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Cleaner</span> cleaner <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DirectBuffer</span><span class="token punctuation">)</span>buffer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cleaner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cleaner<span class="token punctuation">.</span><span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div><p>E</p>`,23),c=[p];function i(o,u){return n(),s("div",null,c)}const l=a(t,[["render",i],["__file","DirectByteBuffer.html.vue"]]);export{l as default};
