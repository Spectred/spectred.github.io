import{_ as n,V as s,W as a,a4 as e}from"./framework-b6120433.js";const t={},p=e(`<h1 id="spi" tabindex="-1"><a class="header-anchor" href="#spi" aria-hidden="true">#</a> SPI</h1><p>SPI Service Provider Interface</p><p>用于让不同模块之间的松散耦合，实现插件式的架构。在Java SPI机制中，服务的提供者通过提供实现了特定接口的类，而服务的使用者则可以通过Java SPI机制动态地获取并使用这些服务提供者的实现。在Spring 、Dubbo中都有其体现。</p><h2 id="_1-定义spi" tabindex="-1"><a class="header-anchor" href="#_1-定义spi" aria-hidden="true">#</a> 1. 定义SPI</h2><h3 id="_1-1-定义接口和实现类" tabindex="-1"><a class="header-anchor" href="#_1-1-定义接口和实现类" aria-hidden="true">#</a> 1.1 定义接口和实现类</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IShout</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">IShout</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;miao&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">IShout</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;wang&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-增加配置文件" tabindex="-1"><a class="header-anchor" href="#_1-2-增加配置文件" aria-hidden="true">#</a> 1.2 增加配置文件</h3><p>在<code>src/main/resources/META-INF/services</code>中新建以接口命名的文件(xx.xx.IShout),内容是实现类的全路径</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>xx.xx.Cat
xx.xx.Dog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-使用serviceloader来加载配置文件中指定的实现" tabindex="-1"><a class="header-anchor" href="#_1-3-使用serviceloader来加载配置文件中指定的实现" aria-hidden="true">#</a> 1.3 使用<code>ServiceLoader</code>来加载配置文件中指定的实现</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IShout</span><span class="token punctuation">&gt;</span></span> serviceLoader <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">IShout</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">IShout</span> iShout <span class="token operator">:</span> serviceLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            iShout<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-实现原理" tabindex="-1"><a class="header-anchor" href="#_2-实现原理" aria-hidden="true">#</a> 2. 实现原理</h2><p>Java SPI的原理是基于Java的类加载机制和反射机制</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> service<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ClassLoader</span> cl <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Reflection</span><span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> service<span class="token punctuation">,</span> cl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-spi优缺点" tabindex="-1"><a class="header-anchor" href="#_3-spi优缺点" aria-hidden="true">#</a> 3. SPI优缺点</h2><p>优点:</p><ul><li>实现了接口是实现类的解耦</li><li>可以动态加载扩展组件，提供框架的灵活性和可扩展性</li></ul><p>缺点:</p><ul><li>一次性加载所有实现类，可能会浪费资源和影响性能</li><li>无法对扩展点排序，无法控制加载顺序</li><li>没有IOC和AOP机制</li></ul><h2 id="_4-应用场景" tabindex="-1"><a class="header-anchor" href="#_4-应用场景" aria-hidden="true">#</a> 4. 应用场景</h2><p>Java SPI有很多应用场景，比如：</p><ul><li>JDBC，不同的数据库厂商可以提供不同的驱动实现类，通过META-INF/services/java.sql.Driver文件来暴露驱动提供者</li><li>COMMON-LOGGING，不同的日志框架可以提供不同的日志实现类，通过<code>META-INF/services/org.apache.commons.logging.LogFactory</code>文件来暴露日志工厂类</li><li>Dubbo，可以通过SPI机制来扩展和替换Dubbo框架中的各种组件，如协议、序列化、负载均衡等</li></ul><p>Spring中也使用了SPI机制，主要有以下几种方式：</p><ul><li>使用SpringFactoriesLoader类来加载META-INF/spring.factories文件中的配置，这个文件可以指定不同的key和value，比如org.springframework.boot.autoconfigure.EnableAutoConfiguration和被标记为@Configuration的类</li><li>使用ServletContainerInitializer接口来实现对servlet3.0规范的支持，这个接口可以在容器启动时执行一些初始化操作，比如注册servlet、过滤器等</li><li>使用Converter SPI和Formatter SPI来实现自动类型转换，这些SPI可以通过ConversionServiceFactoryBean或FormattingConversionServiceFactoryBean来注册到Spring容器中</li></ul>`,24),c=[p];function o(i,l){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","SPI.html.vue"]]);export{r as default};
