import{_ as i,V as n,W as r,Z as e,$ as o,Y as l,a4 as t,F as a}from"./framework-eedf5ae1.js";const c={},s=t(`<h1 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql" aria-hidden="true">#</a> MySQL</h1><h3 id="_1-体系架构" tabindex="-1"><a class="header-anchor" href="#_1-体系架构" aria-hidden="true">#</a> 1. 体系架构</h3><figure><img src="https://dev.mysql.com/doc/refman/8.0/en/images/mysql-architecture.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-一条sql查询语句如何执行" tabindex="-1"><a class="header-anchor" href="#_2-一条sql查询语句如何执行" aria-hidden="true">#</a> 2. 一条SQL查询语句如何执行</h3><ol><li>客户端通过<strong>连接器</strong>连接到数据库，连接器负责管理连接和权限验证</li><li><strong>查询缓存</strong>，不建议使用(对表更新时表的所有查询缓存都被清空)，8.0后删除了缓存功能</li><li><strong>分析器</strong>对SQL语句进行词法分析和语法分析</li><li><strong>优化器</strong>执行计划生成和索引选择</li><li><strong>执行器</strong>调用存储引擎提供的读写接口返回结果</li></ol><h3 id="_3-有哪些存储引擎" tabindex="-1"><a class="header-anchor" href="#_3-有哪些存储引擎" aria-hidden="true">#</a> 3. 有哪些存储引擎</h3><p>通过<code>mysql&gt; SHOW ENGINES;</code>或者<code>mysql&gt; SELECT * FROM INFORMATION_SCHEMA.ENGINES;</code>查看有哪些引擎</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt;  SELECT * FROM INFORMATION_SCHEMA.ENGINES;
+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+
| ENGINE             | SUPPORT | COMMENT                                                        | TRANSACTIONS | XA   | SAVEPOINTS |
+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+
| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        |
| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         |
| MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables      | NO           | NO   | NO         |
| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears) | NO           | NO   | NO         |
| MyISAM             | YES     | MyISAM storage engine                                          | NO           | NO   | NO         |
| CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         |
| ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         |
| PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         |
| FEDERATED          | NO      | Federated MySQL storage engine                                 | NULL         | NULL | NULL       |
+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+
9 rows in set (0.01 sec)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-innodb和myisam的区别" tabindex="-1"><a class="header-anchor" href="#_4-innodb和myisam的区别" aria-hidden="true">#</a> 4. <code>InnoDB</code>和<code>MyISAM</code>的区别</h3><ul><li>从功能上看，<code>InnoDB</code>支持事务，行锁，外键</li><li>从存储文件上看，<code>InnoDB</code>的表结构文件是<code>.frm</code>，数据文件是<code>.idb</code>,<code>MyISAM</code>的表数据是<code>.myd</code>，索引文件是<code>myi</code></li><li>从索引结构上看，<code>InnoDB</code>是聚簇，<code>MyISAM</code>非聚簇</li></ul><h3 id="_5-innodb架构" tabindex="-1"><a class="header-anchor" href="#_5-innodb架构" aria-hidden="true">#</a> 5. <code>InnoDB</code>架构</h3><figure><img src="https://dev.mysql.com/doc/refman/8.0/en/images/innodb-architecture-8-0.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,12),h={id:"_5-1-内存架构",tabindex:"-1"},p=e("a",{class:"header-anchor",href:"#_5-1-内存架构","aria-hidden":"true"},"#",-1),_={href:"https://dev.mysql.com/doc/refman/8.0/en/innodb-in-memory-structures.html",target:"_blank",rel:"noopener noreferrer"},u={href:"https://dev.mysql.com/doc/refman/8.0/en/innodb-buffer-pool.html",target:"_blank",rel:"noopener noreferrer"},g=t("<blockquote><p>知道如何利用缓冲池将经常访问的数据保存在内存中是MySQL调优的一个重要方面</p></blockquote><p>以16k的<code>Page</code>为单位，采用链表管理<code>Page</code></p><p><code>Page</code>分为:</p><ul><li><code>Free Page</code>: 空闲页，未被使用 =&gt; 空闲缓冲区: <code>Free List</code></li><li><code>Clean Page</code>: 数据没有被修改过 =&gt; 正在使用的缓冲区: <code>LRU List</code></li><li><code>Dirty Page</code>: 脏页，被修改过，和磁盘不一致 =&gt; 需要刷新到磁盘缓冲区: Flush List</li></ul>",4),f={href:"https://dev.mysql.com/doc/refman/8.0/en/innodb-change-buffer.html",target:"_blank",rel:"noopener noreferrer"},m=t("<p>更新一条记录时，</p><ul><li><p>若在<code>Buffer Pool</code>中存在，则直接在<code>Buffer Pool</code>中修改；</p></li><li><p>若在<code>Buffer Pool</code>中不存在，则直接在<code>Change Buffer</code>中进行内存操作，当下次查询时，会先从磁盘中读取，再从<code>Change Buffer</code>中读取，并合并，最终载入到<code>Buffer Pool</code></p></li></ul><p><code>Change Buffer</code>仅适用于<strong>非唯一普通索引</strong>，若设置了索引的唯一性，修改时必须做唯一性校验，查磁盘</p>",3),b={href:"https://dev.mysql.com/doc/refman/8.0/en/innodb-adaptive-hash.html",target:"_blank",rel:"noopener noreferrer"},y=e("p",null,[o("自适应哈希索引，"),e("code",null,"InnoDB"),o("会自动根据访问的频率的模式来建立哈希索引")],-1),x={href:"https://dev.mysql.com/doc/refman/8.0/en/innodb-redo-log-buffer.html",target:"_blank",rel:"noopener noreferrer"},L=e("p",null,[o("日志缓冲区，保存"),e("code",null,"Redo Log"),o("、"),e("code",null,"Undo Log"),o("，定期或者写满时刷新到磁盘，节省磁盘IO")],-1),v={id:"_5-2-磁盘架构",tabindex:"-1"},q=e("a",{class:"header-anchor",href:"#_5-2-磁盘架构","aria-hidden":"true"},"#",-1),S={href:"https://dev.mysql.com/doc/refman/8.0/en/innodb-on-disk-structures.html",target:"_blank",rel:"noopener noreferrer"},k=e("blockquote",null,[e("p",null,"包含表，表空间，索引，双写缓冲，Redo Log，Undo Log")],-1),R=e("h3",{id:"_6-mysql中有哪些日志",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_6-mysql中有哪些日志","aria-hidden":"true"},"#"),o(" 6. MySQL中有哪些日志")],-1),N={id:"_6-1-binary-log",tabindex:"-1"},I=e("a",{class:"header-anchor",href:"#_6-1-binary-log","aria-hidden":"true"},"#",-1),M={href:"https://dev.mysql.com/doc/refman/8.0/en/binary-log.html",target:"_blank",rel:"noopener noreferrer"},O=e("p",null,[e("code",null,"bin log"),o("是MySQL Server层的日志，是记录所有数据库表结构变更和表数据修改的二进制日志，不会记录"),e("code",null,"select"),o("和"),e("code",null,"show"),o(",以事件形式记录，也包含了执行的消耗时间")],-1),E={href:"https://dev.mysql.com/doc/refman/8.0/en/binary-log-formats.html",target:"_blank",rel:"noopener noreferrer"},w=t("<ul><li><p><code>ROW</code>: 日志中记录每一行数据被修改的情况，然后在<code>slave</code>端对相同的数据进行修改</p><p>优点: 记录每一行数据的修改细节，完全实现主从数据同步的数据恢复</p><p>缺点: 批量操作会产生大量日志</p></li><li><p><code>STAMENT</code>: 每一条被修改数据的SQL都会记录到<code>master</code>的<code>bin log</code>中，<code>slave</code>在复制时对SQL进行解析执行</p><p>优点: 日志量小，减少磁盘IO，提升存储和恢复速度</p><p>缺点: 在某些情况下会导致主从数据不一致，例如<code>now()</code></p></li><li><p><code>MIXED</code>: 混合使用，优先使用<code>STAMENT</code>保存<code>bin log</code>，对于无法复制的操作使用<code>ROW</code>模式保存<code>bin log</code></p></li></ul><p><strong>使用场景:</strong></p><ul><li><p>主从复制</p></li><li><p>数据恢复</p><p><code>mysqlbinlog</code>可以指定时间或时间位置恢复，做增量备份和恢复</p><blockquote><p><code>mysqldump</code>可以定期全部备份数据库数据</p></blockquote></li></ul>",3),B={id:"_6-2-redo-log",tabindex:"-1"},C=e("a",{class:"header-anchor",href:"#_6-2-redo-log","aria-hidden":"true"},"#",-1),A={href:"https://dev.mysql.com/doc/refman/8.0/en/innodb-redo-log.html",target:"_blank",rel:"noopener noreferrer"},T=t('<p>重做日志基于磁盘，用于崩溃恢复期间更正不完整事务，以循环方式写入(<code>ib_logfile0</code>、<code>ib_logfile1</code>)，记录所有对<code>Buffer Pool</code>修改的日志</p><p>随着事务操作的执行就会产生<code>Redo Log</code>，在事务提交时将产生的<code>Redo Log</code>写入<code>Log Buffer</code>,等事务操作的脏页写入到磁盘后，<code>Redo Log</code>可重用复写，是<code>WAL</code>写前日志</p><p>作用: 实现事务的<strong>持久性</strong>，防止在发生故障的时间点，尚有脏页未写入表<code>ibd</code>文件，在重启MySQL服务时，根据<code>Redo Log</code>重做，从而达到事务的未入磁盘的数据持久化</p><ul><li><code>bin Log</code>和<code>Redo Log</code>的区别</li></ul><table><thead><tr><th style="text-align:center;">bin log</th><th style="text-align:center;">Redo Log</th></tr></thead><tbody><tr><td style="text-align:center;">MySQL Server层日志，二进制文件</td><td style="text-align:center;">InnoDB引擎的日志</td></tr><tr><td style="text-align:center;">逻辑日志(记录更新过程)</td><td style="text-align:center;">物理日志(记录数据更新状态内容)</td></tr><tr><td style="text-align:center;">追加写(写完写下一个，不会覆写)</td><td style="text-align:center;">循环写(日志空间大小固定)</td></tr><tr><td style="text-align:center;">主从复制，数据恢复(没有自动Crash Safe能力)</td><td style="text-align:center;">服务器宕机后事务数据自动恢复</td></tr></tbody></table>',5),D={id:"_6-3-undo-logs",tabindex:"-1"},U=e("a",{class:"header-anchor",href:"#_6-3-undo-logs","aria-hidden":"true"},"#",-1),Q={href:"https://dev.mysql.com/doc/refman/8.0/en/innodb-undo-logs.html",target:"_blank",rel:"noopener noreferrer"},P=t("<p>撤销日志，事务开始之前保存的被修改的数据备份，可回滚事务</p><p>在事务开始之前产生，在事务提交时，将事务对应的<code>Undo Log</code>放到删除列表中，之后通过后台线程<code>Purge Thread</code>进行回收</p><p>属于逻辑日志，记录一个变化的相反过程，例如<code>INSERT</code>对应<code>DELETE</code></p><p>存储: 采用<code>段</code>的方式管理和记录，有1024个回滚段</p><p><code>show variables like &#39;%innodb_undo%&#39;;</code></p><p><strong>作用:</strong></p><ul><li><p>实现事务的原子性</p><p>利用<code>Undo Log</code>中的备份数据恢复到事务开始之前的状态</p></li><li><p>实现<code>MVCC</code></p><p>事务未提交之前，<code>Undo Log</code>保存了未提交之前的数据，<code>Undo Log</code>中的数据可作为数据旧版本快照工其他事务进行快照读</p></li></ul>",7),V={id:"_6-4-slow-query-log",tabindex:"-1"},F=e("a",{class:"header-anchor",href:"#_6-4-slow-query-log","aria-hidden":"true"},"#",-1),Y={href:"https://dev.mysql.com/doc/refman/8.0/en/slow-query-log.html",target:"_blank",rel:"noopener noreferrer"},H={href:"https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time",target:"_blank",rel:"noopener noreferrer"},z={href:"https://dev.mysql.com/doc/refman/8.0/en/mysqldumpslow.html",target:"_blank",rel:"noopener noreferrer"},G=e("code",null,"cat slow.log",-1),W=t('<h3 id="_7-有哪些索引" tabindex="-1"><a class="header-anchor" href="#_7-有哪些索引" aria-hidden="true">#</a> 7. 有哪些索引</h3><h4 id="_7-1-按照数据存储和键值逻辑关系" tabindex="-1"><a class="header-anchor" href="#_7-1-按照数据存储和键值逻辑关系" aria-hidden="true">#</a> 7.1 按照数据存储和键值逻辑关系</h4><ul><li>聚簇索引 - 数据在索引数上(主键)</li><li>非聚簇索引 - 数据不在索引数上(非主键)</li></ul><h4 id="_7-2-按照索引的存储结构划分" tabindex="-1"><a class="header-anchor" href="#_7-2-按照索引的存储结构划分" aria-hidden="true">#</a> 7.2 按照索引的存储结构划分</h4><ul><li>B+ Tree</li><li>Hash</li><li>Full Text</li><li>R Tree</li></ul><h4 id="_7-3-按照应用层次划分" tabindex="-1"><a class="header-anchor" href="#_7-3-按照应用层次划分" aria-hidden="true">#</a> 7.3 按照应用层次划分</h4><ul><li>主键索引</li><li>唯一索引</li><li>普通索引</li><li>复合索引</li></ul><h3 id="_8-回表-覆盖索引-索引下推分别是什么" tabindex="-1"><a class="header-anchor" href="#_8-回表-覆盖索引-索引下推分别是什么" aria-hidden="true">#</a> 8. 回表，覆盖索引，索引下推分别是什么</h3><h4 id="_8-1-回表" tabindex="-1"><a class="header-anchor" href="#_8-1-回表" aria-hidden="true">#</a> 8.1 回表</h4><p>通过非聚簇索引得到主键，再到聚簇索引中查询数据</p><h4 id="_8-2-覆盖索引" tabindex="-1"><a class="header-anchor" href="#_8-2-覆盖索引" aria-hidden="true">#</a> 8.2 覆盖索引</h4><p>查询列被索引覆盖，不必从数据表中查询，例如<code>select name from tb where name =&#39;x&#39;;</code> 其中<code>name</code>字段有索引</p>',12),X={id:"_8-3-索引下推",tabindex:"-1"},j=e("a",{class:"header-anchor",href:"#_8-3-索引下推","aria-hidden":"true"},"#",-1),K={href:"https://dev.mysql.com/doc/refman/8.0/en/index-condition-pushdown-optimization.html",target:"_blank",rel:"noopener noreferrer"},Z=t('<p>将部分Server层的索引交给引擎层处理，减少回表次数，索引下推只适用于非聚簇索引</p><h3 id="_9-索引失效场景" tabindex="-1"><a class="header-anchor" href="#_9-索引失效场景" aria-hidden="true">#</a> 9. 索引失效场景</h3><ul><li>隐式转换</li><li>内置函数</li><li>数学运算(加减乘除)</li><li><code>IS NULL</code> 或 <code>IS NOT NULL</code></li><li><code>!=</code> 或者 <code>NOT IN</code></li><li>条件中包含<code>OR</code> ,可能失效(OR 的一方无所索引，会导致全表查询)</li><li>不符合最左前缀，联合索引不符合</li><li>MySQL估计全表比索引快</li><li>过滤性不好，例如性别，不适合做索引</li></ul><h3 id="_10-sql语句的优化" tabindex="-1"><a class="header-anchor" href="#_10-sql语句的优化" aria-hidden="true">#</a> 10. SQL语句的优化</h3><p>先获取到慢查询日志，通过<code>Explain</code>分析执行计划</p><ul><li><p><code>type</code></p><p><code>NULL</code> &gt; <code>const</code> &gt; <code>eq_ref</code> &gt; <code>ref</code> &gt; <code>range</code> &gt; <code>index</code> &gt; <code>ALL</code></p><ul><li><code>const</code>: 主键/唯一索引等值查询</li><li><code>eq_ref</code>: 多表<code>join</code>,前表每一个记录都只能匹配后表的一个记录</li><li><code>ref</code>: 非唯一索引等值查询</li><li><code>range</code>: 索引范围查询</li><li><code>index</code>: 基于索引全表扫描</li></ul></li><li><p><code>key</code>: 真正用的索引</p></li><li><p><code>rows</code>: 需要扫描多少行，越少越好</p></li><li><p><code>key_len</code>: 越小越好</p></li><li><p><code>Extra</code>: 额外信息</p><ul><li><code>Using Index</code>: 覆盖索引</li><li><code>Using Where</code>: 回表</li><li><code>Using temporay</code>: 临时表，分组</li><li><code>Using filesort</code>: <code>order by</code> 没索引</li><li><code>Using join buffer</code>: 联表条件没索引</li></ul></li></ul><h3 id="_11-mysql如何优化" tabindex="-1"><a class="header-anchor" href="#_11-mysql如何优化" aria-hidden="true">#</a> 11. MySQL如何优化</h3>',7),$={id:"_1-参考官方文档-optimizaition",tabindex:"-1"},J=e("a",{class:"header-anchor",href:"#_1-参考官方文档-optimizaition","aria-hidden":"true"},"#",-1),ee={href:"https://dev.mysql.com/doc/refman/8.0/en/optimization.html",target:"_blank",rel:"noopener noreferrer"},oe=t('<h4 id="_2-要符合开发规范" tabindex="-1"><a class="header-anchor" href="#_2-要符合开发规范" aria-hidden="true">#</a> 2. 要符合开发规范</h4><ul><li>避免<code>select *</code></li><li>减少<code>join</code></li><li>不在有限数据建立索引</li></ul><h4 id="_3-sql语句优化-慢查询-执行计划" tabindex="-1"><a class="header-anchor" href="#_3-sql语句优化-慢查询-执行计划" aria-hidden="true">#</a> 3. SQL语句优化(慢查询，执行计划)</h4><h4 id="_4-表设计优化" tabindex="-1"><a class="header-anchor" href="#_4-表设计优化" aria-hidden="true">#</a> 4. 表设计优化</h4><ul><li>禁止<code>null</code>字段</li><li>避免<code>text</code>大字段</li><li>自增主键</li></ul><h4 id="_5-数据库配置" tabindex="-1"><a class="header-anchor" href="#_5-数据库配置" aria-hidden="true">#</a> 5. 数据库配置</h4><ul><li>全局内存参数</li><li>线程内存参数</li></ul><h4 id="_6-硬件升级-内存-磁盘-网络" tabindex="-1"><a class="header-anchor" href="#_6-硬件升级-内存-磁盘-网络" aria-hidden="true">#</a> 6. 硬件升级(内存，磁盘，网络)</h4><h4 id="_7-减少数据库的访问-本地缓存-分布式缓存" tabindex="-1"><a class="header-anchor" href="#_7-减少数据库的访问-本地缓存-分布式缓存" aria-hidden="true">#</a> 7. 减少数据库的访问(本地缓存，分布式缓存)</h4><h4 id="_8-架构优化" tabindex="-1"><a class="header-anchor" href="#_8-架构优化" aria-hidden="true">#</a> 8. 架构优化</h4><ul><li>主从 - 读写分离</li><li>分库分表</li></ul><blockquote><p>分页优化 <code>select * from t where id &gt;= (select id from t2 limit 10000,1) limit 10</code></p></blockquote><h3 id="_12-事务" tabindex="-1"><a class="header-anchor" href="#_12-事务" aria-hidden="true">#</a> 12. 事务</h3><blockquote><p>事务可分为本地事务，分布式事务等，这里只描述MySQL本地事务</p></blockquote><h4 id="_12-1-原子性-automicity-redo-undo" tabindex="-1"><a class="header-anchor" href="#_12-1-原子性-automicity-redo-undo" aria-hidden="true">#</a> 12.1 原子性-Automicity (Redo Undo)</h4><p>事务是一个原子单元，数据的修改要么全部执行要么全部执行</p><p><strong>如何实现：</strong></p><p>数据的修改要经过: 修改-&gt;<code>Buffer Pool</code>修改-&gt;刷盘</p><ul><li>事务没有提交，但是<code>Buffer Pool</code>中的脏页刷盘了，使用<code>Undo</code>撤销</li><li>事务已经提交，但是<code>Buffer Pool</code>中的脏页未刷盘，使用<code>Redo</code>生效</li></ul><h4 id="_12-2-持久性-durability-redo" tabindex="-1"><a class="header-anchor" href="#_12-2-持久性-durability-redo" aria-hidden="true">#</a> 12.2 持久性-Durability (Redo)</h4><p>事务一旦提交，它对数据的改变是永久性的，后续的操作或故障不应该对其有影响，不是丢失</p><p>实现上和<code>WAL</code>写前日志有关，<code>Redo Log</code>在系统宕机重启时保证持久性</p><blockquote><p>原子性保证逻辑上的持久性，存储引擎的刷盘保证物理上持久</p></blockquote><h4 id="_12-3-一致性-consistency" tabindex="-1"><a class="header-anchor" href="#_12-3-一致性-consistency" aria-hidden="true">#</a> 12.3 一致性-Consistency</h4><p>事务开始之前和结束之后，数据库的完整性没有被破坏</p><ul><li>数据一致性: 通过A、I、D共同保证</li><li>约束一致性: 创建表时所指定的外键、唯一索引等约束</li></ul><h4 id="_12-4-隔离性-isolation" tabindex="-1"><a class="header-anchor" href="#_12-4-隔离性-isolation" aria-hidden="true">#</a> 12.4 隔离性-Isolation</h4><p>一个事务的执行不能被其他事务干扰，并发事务隔离</p><p><code>show variables like &#39;transaction_isolation&#39;</code></p><p><strong>隔离级别:</strong></p><ul><li><p>读未提交 <code>Read Uncomitted</code></p><p>可能读到其他会话未提交事务修改数据</p></li><li><p>读已提交 <code>Read Comitted</code></p><p>只能读到其他会话中已提交的数据</p></li><li><p>可重复度 <code>Repateble Read</code></p><p>同一个事务的多一个实例在并发时，会读到相同的数据</p></li><li><p>串行化 <code>Serializable</code></p><p>串行执行</p></li></ul><p><strong>并发事务问题:</strong></p>',32),de=e("li",null,"脏读: 读取到另一个事务修改，但未提交的数据",-1),le=e("li",null,"不可重复读: 一个事务中多次读取同一张记录不一致",-1),te={href:"https://dev.mysql.com/doc/refman/8.0/en/innodb-next-key-locking.html",target:"_blank",rel:"noopener noreferrer"},ie=e("code",null,"select",-1),ne=t('<table><thead><tr><th></th><th style="text-align:center;">脏读</th><th style="text-align:center;">不可重复读</th><th style="text-align:center;">幻读</th></tr></thead><tbody><tr><td>读未提交</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td></tr><tr><td>读已提交</td><td style="text-align:center;">✖️</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td></tr><tr><td>可重复读</td><td style="text-align:center;">✖️</td><td style="text-align:center;">✖️</td><td style="text-align:center;">✅</td></tr><tr><td>串行化</td><td style="text-align:center;">✖️</td><td style="text-align:center;">✖️</td><td style="text-align:center;">✖️</td></tr></tbody></table>',1),re={id:"_13-mvcc-多版本并发控制",tabindex:"-1"},ae=e("a",{class:"header-anchor",href:"#_13-mvcc-多版本并发控制","aria-hidden":"true"},"#",-1),ce={href:"https://dev.mysql.com/doc/refman/8.0/en/innodb-multi-versioning.html",target:"_blank",rel:"noopener noreferrer"},se=t('<p>适用于<code>RC</code>、<code>RR</code>的隔离级别，适合读读、读写；如果发生读写冲突仍需要用锁</p><p><strong>隐藏字段</strong>:</p><ul><li><code>DB_ROW_ID</code>: 递增的id,非必须，没有主键时有<code>row_id</code></li><li><code>DB_TRX_ID</code>: 操作该数据事务的事务ID</li><li><code>DB_ROLL_PTR</code>: 指向该回滚段的<code>undo log</code></li></ul><p><strong>事务版本号</strong>: 事务每次开启前，都会从数据库获得一个自增的事务ID，用来判断事务执行的顺序</p><p><strong>版本链</strong>: 多个事务并行操作某一行数据时，不同事务对改行的修改产生多个版本，通过回滚指针形成的链表</p><p><strong>快照读</strong>：读取数据的可见版本(有旧版本)，不加锁，普通的<code>select</code>都是快照读</p><p><strong>当前读</strong>：读取数据的最新版本，显示加锁的都是当前读，例如<code>select * from t where id &gt;1 [for update | lock in share mode]</code></p><p><strong>Read View</strong>： 事务执行SQL语句时产生的读视图，在InnoDB中，每个SQL语句执行前都会有一个<code>ReadView</code>,用来做可见性判断（判断当前事务可见哪个版本的数据）</p><h4 id="_13-1-基于mvcc的查询记录流程" tabindex="-1"><a class="header-anchor" href="#_13-1-基于mvcc的查询记录流程" aria-hidden="true">#</a> 13.1 基于MVCC的查询记录流程</h4><ol><li>获取事务id （事务自己的版本号），获取<code>Read View</code></li><li>查询得到的数据，和<code>Read View</code>中事务版本号进行比较</li><li>如果不符合<code>ReadView</code>可见性规则则从<code>Undo Log</code>中查询历史快照</li><li>返回符合规则的数据</li></ol><h4 id="_13-2-mvcc解决不可重复读" tabindex="-1"><a class="header-anchor" href="#_13-2-mvcc解决不可重复读" aria-hidden="true">#</a> 13.2 MVCC解决不可重复读</h4><ul><li>在<code>RC</code>，同事务每次查询产生一个新的<code>Read View</code>副本，产生不可重复读</li><li>在<code>RR</code>,一个事务里只获取一次<code>Read View</code>，副本共用，保证可重复读</li></ul><h4 id="_13-3-mvcc是否彻底解决了幻读" tabindex="-1"><a class="header-anchor" href="#_13-3-mvcc是否彻底解决了幻读" aria-hidden="true">#</a> 13.3 MVCC是否彻底解决了幻读？</h4><p>否，事务a先select,事务b insert,加gaplock，commit后gaplock释放，a再select和第一次一样，不加条件的update会作用到所有行，a再select回出现b的新行，且被a修改</p><h3 id="_14-mysql中有哪些锁" tabindex="-1"><a class="header-anchor" href="#_14-mysql中有哪些锁" aria-hidden="true">#</a> 14. MySQL中有哪些锁🔒</h3>',15),he={href:"https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html",target:"_blank",rel:"noopener noreferrer"},pe=t('<blockquote><p>锁是加在索引记录上的</p></blockquote><h4 id="_14-1-加锁范围" tabindex="-1"><a class="header-anchor" href="#_14-1-加锁范围" aria-hidden="true">#</a> 14.1 加锁范围</h4><ol><li><p><strong>全局锁</strong></p><p>全库的逻辑备份</p></li><li><p><strong>表级锁</strong></p><ul><li>表锁: <code>lock tables ... read / write</code></li><li>MDL: 访问表时自动加锁</li></ul></li><li><p><strong>行锁</strong>(<code>Row Lock</code>)</p><ul><li><code>Record Lock</code>: 记录锁，锁定单个记录的锁</li><li><code>Gap Lock</code>：间隙锁，锁定索引记录的间隙(防幻读)，<code>(a,b)</code></li><li><code>Next-Key Lock</code>：临键锁 <code>(a,b]</code></li></ul></li></ol><p><strong>如何加锁？</strong></p>',4),_e={href:"https://blog.csdn.net/m0_67261762/article/details/125522033",target:"_blank",rel:"noopener noreferrer"},ue=t('<ul><li><p><code>update ... where id = 1</code></p><ul><li>如果不存在id = 1的数据，则加锁范围:<code>(1,10]</code></li><li>如果存在id = 1 的数据，则<code>Next-Key Lock</code>退化为<code>Record Lock</code>，即<code>[1]</code></li></ul></li><li><p><code>update ... where id &gt; 1 and id &lt;10</code> , 加间隙锁</p></li><li><p><code>update ... where id &gt;1 and id &lt;= 10</code>,加临键锁</p></li></ul><p>假设表t中已有数据如下，要执行<code>update ... where age = 5</code></p><table><thead><tr><th>id</th><th>Name</th><th>Age</th></tr></thead><tbody><tr><td>1</td><td>a</td><td>1</td></tr><tr><td>10</td><td>b</td><td>10</td></tr></tbody></table><ul><li>如果age是索引，将产生3个索引范围<code>(-∞,1]</code>，<code>(1,10]</code>，<code>(10,+∞)</code><ul><li>由于<code>age=5</code>的记录不存在，且在<code>(1,10]</code>区间内，则对<code>(1,10]</code>的范围加锁</li><li>如果<code>age=5</code>的记录已存在，先对<code>(1,5]</code>加锁，再向右遍历到不满足条件位置<code>(5,10]</code>,综合就是<code>(1,10]</code></li></ul></li></ul><h4 id="_14-2-乐观锁和悲观锁" tabindex="-1"><a class="header-anchor" href="#_14-2-乐观锁和悲观锁" aria-hidden="true">#</a> 14.2 乐观锁和悲观锁</h4><ul><li><p>乐观锁: 对数据记录的版本进行对比，更新提交时进行冲突检测，使用版本号或者时间戳</p><p><code>updte t set c = c+1 where version = 2;</code></p></li><li><p>悲观锁: 修改前进行锁定，S/X都属于悲观锁</p></li></ul><h4 id="_14-3-操作类型" tabindex="-1"><a class="header-anchor" href="#_14-3-操作类型" aria-hidden="true">#</a> 14.3 操作类型</h4><ul><li>IS: 意向读锁，事务打算在表中的单个行上设置共享锁，<code>select ... for share</code></li><li>IX: 意向写锁，表级锁，事务打算在表中的单个行上设置独占锁， <code>select ... for update</code></li><li>S: 读锁，行级锁，允许持有锁的事务进行读</li><li>X: 写锁，行级锁，允许持有锁的事务进行更新、删除行</li></ul>',8),ge={id:"_15-死锁",tabindex:"-1"},fe=e("a",{class:"header-anchor",href:"#_15-死锁","aria-hidden":"true"},"#",-1),me={href:"https://dev.mysql.com/doc/refman/8.0/en/innodb-deadlocks.html",target:"_blank",rel:"noopener noreferrer"},be=t('<p>查看死锁日志: <code>show engine innodb status \\G</code></p><p>查看锁状态变量: <code>show status like &#39;innodb_row_lock%&#39; \\G</code></p><h3 id="_16-mysql集群架构" tabindex="-1"><a class="header-anchor" href="#_16-mysql集群架构" aria-hidden="true">#</a> 16. MySQL集群架构</h3><h4 id="_16-1-主从模式" tabindex="-1"><a class="header-anchor" href="#_16-1-主从模式" aria-hidden="true">#</a> 16.1 主从模式</h4><p>数据可以从一个MySQL服务器主节点复制到一个或多个从节点</p><p>必要条件: 1.从库连通主库，2.主从<code>server_id</code>不同，3.主库开启<code>binlog</code></p><p>实现原理:</p><ol><li>主库将数据的变更操作记录到<code>binlog</code>,<code>BinlogDump Thread</code>接到写入请求后，读取<code>binlog</code>信息推送给从库的<code>IO Thread</code></li><li>从库的<code>IO Thread</code>读取主库的<code>binlog</code>,并写入到从库的<code>Relay Log</code></li><li>从库的<code>SQL Thread</code>检测到<code>Relay Log</code>的变更请求，解析<code>Relay Log</code>的内容在从库中执行</li></ol><p>由于上述都是异步操作，一般成为<strong>异步复制</strong></p><p>异步主从复制存在的问题和解决:</p>',10),ye={href:"https://dev.mysql.com/doc/refman/8.0/en/replication-semisync.html",target:"_blank",rel:"noopener noreferrer"},xe=e("li",null,[e("p",null,[o("从库只有一个"),e("code",null,"SQL Thread"),o(",主库压力大时从库复制延迟 => "),e("strong",null,"并行复制"),o(": 对"),e("code",null,"SQL Thread"),o("采用多线程")])],-1),Le=t("<blockquote><p>使用读写分离架构需要注意主从同步延迟和读写路由分配机制的问题</p></blockquote><p><strong>主从同步延迟</strong>:</p><ul><li><p>写后立刻读： 在写入数据库后的一段时间内在主库读</p></li><li><p>二次查询: 先从从库读，读不到读主库</p></li><li><p>根据业务处理</p><p>实时性高的读主库，不高的读从库</p></li></ul><p><strong>读写路由分配机制</strong>:</p>",4),ve=e("li",null,"基于编程和配置实现",-1),qe={href:"https://dev.mysql.com/doc/mysql-router/8.0/en/",target:"_blank",rel:"noopener noreferrer"},Se={href:"http://www.mycat.org.cn",target:"_blank",rel:"noopener noreferrer"},ke={href:"https://shardingsphere.apache.org",target:"_blank",rel:"noopener noreferrer"},Re=e("h4",{id:"_16-2-双主模式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_16-2-双主模式","aria-hidden":"true"},"#"),o(" 16.2 双主模式")],-1),Ne=e("blockquote",null,[e("p",null,"避免主从的单点故障；两台服务器互为主从，双方复制"),e("p",null,"避免ID冲突更新丢失：双主单写")],-1),Ie={href:"https://code.google.com/archive/p/mysql-master-ha/",target:"_blank",rel:"noopener noreferrer"},Me=t('<h3 id="_17-关于分库分表" tabindex="-1"><a class="header-anchor" href="#_17-关于分库分表" aria-hidden="true">#</a> 17. 关于分库分表</h3><h4 id="_17-1-拆分方式" tabindex="-1"><a class="header-anchor" href="#_17-1-拆分方式" aria-hidden="true">#</a> 17.1 拆分方式</h4><ul><li><p>纵向拆分</p><p>分库分表: 解决表过多，表字段过度的问题</p><ul><li>优点： 业务清晰，规则明确，易维护和扩展，便于冷热分离</li><li>缺点: 主键荣誉，引起<code>join</code>的复杂度，事务处理复杂，存在单表过大</li></ul></li><li><p>横向拆分</p><p>解决表中记录过多</p><p>拆分规则: <code>Range</code>,<code>Hash</code></p><ul><li>优点: 不存在单库大数据高并发性能瓶颈，提高稳定和负载</li><li>缺点: 跨库<code>join</code>性能差，分片事务一致性，数据扩容难度和维护量大</li></ul></li></ul><h4 id="_17-2-主键策略" tabindex="-1"><a class="header-anchor" href="#_17-2-主键策略" aria-hidden="true">#</a> 17.2 主键策略</h4>',4),Oe=e("li",null,"UUID",-1),Ee=e("li",null,"数据库ID",-1),we=e("li",null,"Redis生成ID",-1),Be={href:"https://github.com/twitter-archive/snowflake",target:"_blank",rel:"noopener noreferrer"},Ce=t('<h4 id="_17-3-分片策略" tabindex="-1"><a class="header-anchor" href="#_17-3-分片策略" aria-hidden="true">#</a> 17.3 分片策略</h4><ul><li>基于范围(<code>Range</code>): 优点-扩容无需迁移，缺点-冷热不均</li><li>哈希取模(<code>Hash</code>): 优点-分配均匀，缺点-扩容时大量迁移</li><li>一致性哈希（哈希环）</li></ul><h4 id="_17-4-扩展方案" tabindex="-1"><a class="header-anchor" href="#_17-4-扩展方案" aria-hidden="true">#</a> 17.4 扩展方案</h4><ul><li>横向: 一个库变多个库-加机器</li><li>纵向: 优化机器性能</li></ul><h4 id="_17-5-扩容方案" tabindex="-1"><a class="header-anchor" href="#_17-5-扩容方案" aria-hidden="true">#</a> 17.5 扩容方案</h4><ul><li><p>停机</p></li><li><p>平滑扩容</p><p>新增两个库配置双主同步，配置双主双写，清理多余数据</p></li></ul>',6);function Ae(Te,De){const d=a("ExternalLinkIcon");return n(),r("div",null,[s,e("h4",h,[p,o(" 5.1 "),e("a",_,[o("内存架构"),l(d)])]),e("ol",null,[e("li",null,[e("p",null,[e("a",u,[o("Buffer Pool"),l(d)])]),g]),e("li",null,[e("p",null,[e("a",f,[o("Change Buffer"),l(d)])]),m]),e("li",null,[e("p",null,[e("a",b,[o("Adaptive Hash"),l(d)])]),y]),e("li",null,[e("p",null,[e("a",x,[o("Log Buffer"),l(d)])]),L])]),e("h4",v,[q,o(" 5.2 "),e("a",S,[o("磁盘架构"),l(d)])]),k,R,e("h4",N,[I,o(" 6.1 "),e("a",M,[o("Binary Log"),l(d)])]),O,e("p",null,[e("strong",null,[e("a",E,[o("记录格式"),l(d)]),o(":")])]),w,e("h4",B,[C,o(" 6.2 "),e("a",A,[o("Redo Log"),l(d)])]),T,e("h4",D,[U,o(" 6.3 "),e("a",Q,[o("Undo Logs"),l(d)])]),P,e("h4",V,[F,o(" 6.4 "),e("a",Y,[o("Slow Query Log"),l(d)])]),e("p",null,[o("慢查询日志，超过 "),e("a",H,[o("long_query_time"),l(d)]),o(" 秒的日志会记录，需要主动开启，可以通过 "),e("a",z,[o("mysqldumpslow"),l(d)]),o(" 命令进行查看(也可以直接查看,例如"),G,o(")，日志中主要包括的属性: 具体的语句，记录的时间，执行的时间等")]),W,e("h4",X,[j,o(" 8.3 "),e("a",K,[o("索引下推"),l(d)])]),Z,e("h4",$,[J,o(" 1. 参考官方文档: "),e("a",ee,[o("Optimizaition"),l(d)])]),oe,e("ul",null,[de,le,e("li",null,[e("a",te,[o("幻读(幻行"),l(d)]),o("): 在同一查询在不同时间产生不同的行，例如"),ie,o("执行两次，但第二次返回了第一次没有返回的行")])]),ne,e("h3",re,[ae,o(" 13. "),e("a",ce,[o("MVCC"),l(d)]),o(" - 多版本并发控制")]),se,e("blockquote",null,[e("p",null,[o("🦈 "),e("a",he,[o("InnoDB Locking"),l(d)]),o(" 中介绍有共享锁锁、独占锁、意向锁，插入意向锁，记录锁，间隙锁，临键锁，自增锁，空间索引锁")])]),pe,e("blockquote",null,[e("p",null,[o("来源: "),e("a",_e,[o("https://blog.csdn.net/m0_67261762/article/details/125522033"),l(d)]),o(" 侵删")])]),ue,e("h3",ge,[fe,o(" 15. "),e("a",me,[o("死锁"),l(d)])]),be,e("ul",null,[e("li",null,[e("p",null,[o("主库宕机后，数据可能丢失 => "),e("strong",null,[e("a",ye,[o("半同步复制"),l(d)])]),o(": 让主库在某一个时间点等待，等到从库的ack，收到后才提交")])]),xe]),Le,e("ul",null,[ve,e("li",null,[o("基于服务器端代理中间件的实现 "),e("ul",null,[e("li",null,[e("a",qe,[o("MySQL Router"),l(d)])]),e("li",null,[e("a",Se,[o("MyCat2"),l(d)])]),e("li",null,[e("a",ke,[o("ShardingSphere"),l(d)])])])])]),Re,Ne,e("p",null,[e("a",Ie,[o("MHA"),l(d)])]),Me,e("ul",null,[Oe,Ee,we,e("li",null,[e("a",Be,[o("Snowflake"),l(d)]),o("：41bit毫秒数，10bit机器id，12bit流水号，0")])]),Ce])}const Qe=i(c,[["render",Ae],["__file","mysql.html.vue"]]);export{Qe as default};
