import{_ as t,V as p,W as o,Z as n,$ as s,X as e,a4 as c,F as l}from"./framework-b6120433.js";const i={},u=c(`<h1 id="反射" tabindex="-1"><a class="header-anchor" href="#反射" aria-hidden="true">#</a> 反射</h1><p>Java反射（Java Reflection）是指在运行时检查和操作Java类、对象、方法、属性等信息的能力。通过反射，可以在运行时获取类的完整结构信息（包括类名、方法、属性、构造函数等），并对其进行操作</p><h2 id="_1-快速使用" tabindex="-1"><a class="header-anchor" href="#_1-快速使用" aria-hidden="true">#</a> 1. 快速使用</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">//1. 获取类对象</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;java.util.ArrayList&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//2. 获取构造函数并创建对象</span>
        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> list <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//3. 调用方法</span>
        <span class="token class-name">Method</span> addMethod <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;add&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        addMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        addMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//4. 访问属性</span>
        <span class="token class-name">Field</span> elementDataField <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;elementData&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        elementDataField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> elementDataField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Hello&quot;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;World&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-class的常用方法" tabindex="-1"><a class="header-anchor" href="#_2-class的常用方法" aria-hidden="true">#</a> 2. Class的常用方法</h2><h3 id="_2-1-获取-class-对象" tabindex="-1"><a class="header-anchor" href="#_2-1-获取-class-对象" aria-hidden="true">#</a> 2.1 获取 Class 对象</h3><p>可以使用以下三种方式之一来获取一个 Class 对象：</p><ul><li>调用类的 <code>class</code> 属性：<code>Class&lt;?&gt; clazz = MyClass.class;</code></li><li>调用对象的 <code>getClass()</code> 方法：<code>Class&lt;?&gt; clazz = myObject.getClass();</code></li><li>使用 Class 的 <code>forName()</code> 方法：<code>Class&lt;?&gt; clazz = Class.forName(&quot;com.example.MyClass&quot;);</code></li></ul><h3 id="_2-2-获取类信息" tabindex="-1"><a class="header-anchor" href="#_2-2-获取类信息" aria-hidden="true">#</a> 2.2 获取类信息</h3><ul><li>获取类名：<code>String className = clazz.getName();</code></li><li>获取包名：<code>String packageName = clazz.getPackage().getName();</code></li><li>获取父类：<code>Class&lt;?&gt; superClass = clazz.getSuperclass();</code></li><li>获取实现的接口：<code>Class&lt;?&gt;[] interfaces = clazz.getInterfaces();</code></li></ul><h3 id="_2-3-获取类成员" tabindex="-1"><a class="header-anchor" href="#_2-3-获取类成员" aria-hidden="true">#</a> 2.3 获取类成员</h3><ul><li>获取所有字段：<code>Field[] fields = clazz.getDeclaredFields();</code></li><li>获取指定名称的字段：<code>Field field = clazz.getDeclaredField(&quot;fieldName&quot;);</code></li><li>获取所有方法：<code>Method[] methods = clazz.getDeclaredMethods();</code></li><li>获取指定名称和参数类型的方法：<code>Method method = clazz.getDeclaredMethod(&quot;methodName&quot;, parameterTypes);</code></li><li>获取所有构造方法：<code>Constructor&lt;?&gt;[] constructors = clazz.getDeclaredConstructors();</code></li><li>获取指定参数类型的构造方法：<code>Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(parameterTypes);</code></li></ul><h3 id="_2-4-实例化对象" tabindex="-1"><a class="header-anchor" href="#_2-4-实例化对象" aria-hidden="true">#</a> 2.4 实例化对象</h3><ul><li>使用默认构造方法创建新实例：<code>Object obj = clazz.newInstance();</code></li><li>使用指定构造方法和参数创建新实例：<code>Object obj = constructor.newInstance(args);</code></li></ul><h3 id="_2-5-修改字段值" tabindex="-1"><a class="header-anchor" href="#_2-5-修改字段值" aria-hidden="true">#</a> 2.5 修改字段值</h3><ul><li>设置可访问性：<code>field.setAccessible(true);</code></li><li>设置字段值：<code>field.set(obj, value);</code></li></ul><h3 id="_2-6-调用方法" tabindex="-1"><a class="header-anchor" href="#_2-6-调用方法" aria-hidden="true">#</a> 2.6 调用方法</h3><ul><li>设置可访问性：<code>method.setAccessible(true);</code></li><li>调用方法：<code>Object result = method.invoke(obj, args);</code></li></ul><h3 id="_2-7-其他方法" tabindex="-1"><a class="header-anchor" href="#_2-7-其他方法" aria-hidden="true">#</a> 2.7 其他方法</h3><ul><li>判断是否为数组类型：<code>boolean isArray = clazz.isArray();</code></li><li>判断是否为接口：<code>boolean isInterface = clazz.isInterface();</code></li><li>判断是否为枚举类型：<code>boolean isEnum = clazz.isEnum();</code></li><li>判断是否为注解类型：<code>boolean isAnnotation = clazz.isAnnotation();</code></li><li>判断是否为基本类型：<code>boolean isPrimitive = clazz.isPrimitive();</code></li></ul><h2 id="_3-应用" tabindex="-1"><a class="header-anchor" href="#_3-应用" aria-hidden="true">#</a> 3. 应用</h2><h3 id="_3-1-在类库中的应用" tabindex="-1"><a class="header-anchor" href="#_3-1-在类库中的应用" aria-hidden="true">#</a> 3.1 在类库中的应用</h3><p>在Spring框架中使用反射来创建bean。例如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.example.User&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span> bean <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Hibernate ORM 框架使用反射来实现对象和数据库之间的映射关系。例如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SessionFactory</span> sessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buildSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ClassMetadata</span> metadata <span class="token operator">=</span> sessionFactory<span class="token punctuation">.</span><span class="token function">getClassMetadata</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>JUnit 测试框架使用反射来运行测试方法，并且支持在测试方法中访问私有字段和方法。例如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.example.UserServiceTest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span> testObj <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Method</span> testMethod <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;testSave&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
testMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>testObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Gson 序列化和反序列化库使用反射来处理 Java 对象的字段和方法。例如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">User</span> user <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-基于反射的工具类" tabindex="-1"><a class="header-anchor" href="#_3-2-基于反射的工具类" aria-hidden="true">#</a> 3.2 基于反射的工具类</h3><ul><li>Spring 中的<code>ReflectionUtils</code></li><li>Apache Commons BeanUtils 中的 <code>BeanUtils</code></li><li>Guava 中的 <code>TypeToken</code>、<code>ClassPath</code>、<code>Reflection</code>、<code>Invoker</code></li><li>Hutool 中的 <code>BeanUtil</code>、<code>ReflectUtil</code></li></ul><div class="hint-container warning"><p class="hint-container-title">反射存在的问题</p><ul><li><p>性能问题：反射操作通常比直接调用 Java 方法或访问 Java 属性的性能要慢，因为它涉及到更多的计算和内部处理。在需要频繁访问和操作属性或方法时，建议尽可能使用直接访问方式。</p></li><li><p>安全问题：由于反射可以绕过 Java 访问控制机制，因此可能导致不安全的代码行为。如果使用反射来访问私有方法或字段，可能会破坏对象的不变性，从而导致程序出现错误或不可预测的行为。</p></li><li><p>可读性问题：使用反射可能使代码更难阅读和理解。由于它可以动态获取对象的属性和方法，因此可能会导致代码更加复杂和难以理解。在使用反射时，应该注重代码的可读性和可维护性。</p></li><li><p>调试问题：由于反射是动态的，因此可能会导致调试时出现一些问题。例如，如果程序在运行时使用反射创建对象或调用方法，可能会导致无法确定对象的实际类型或方法的实际参数。</p></li></ul></div><h2 id="_4-内省" tabindex="-1"><a class="header-anchor" href="#_4-内省" aria-hidden="true">#</a> 4. 内省</h2><div class="hint-container info"><p class="hint-container-title">内省</p><p>内省机制是 Java 中一种用于操作 JavaBean 属性的机制，它允许程序在运行时通过反射来获取一个 JavaBean 对象的属性、方法等信息，并且可以动态地访问和修改这些属性。</p><p>通俗来讲，内省机制就是指在运行时通过反射获取一个 JavaBean 对象的属性信息，并动态地操作它们。JavaBean 是一种符合特定规范的 Java 对象，其中包含一些私有的属性（成员变量）以及与这些属性对应的 getter 和 setter 方法，JavaBean 规范要求这些方法必须按照一定的命名规则进行命名。通过内省机制，我们可以在运行时获取这些 getter 和 setter 方法的信息，从而实现对 JavaBean 属性的动态操作。</p><p>内省机制的优点是它比纯粹的反射机制更加安全和规范，可以避免一些潜在的类型不匹配等问题，并且可以方便地操作 JavaBean 的属性，适用于很多工具和框架中。但是内省机制相比反射机制也有一定的局限性，例如它只能访问公共属性和方法，而无法访问私有属性和方法等。</p></div><h3 id="_4-1-内省机制的核心类" tabindex="-1"><a class="header-anchor" href="#_4-1-内省机制的核心类" aria-hidden="true">#</a> 4.1 内省机制的核心类</h3><ol><li><code>Introspector</code>：主要是用于获取 BeanInfo 对象。</li><li><code>BeanInfo</code>：描述一个 JavaBean 的信息，包括 Bean 的属性、方法等信息。</li><li><code>PropertyDescriptor</code>：描述一个属性的信息，包括属性的 getter、setter 方法等信息。</li><li><code>MethodDescriptor</code>：描述一个方法的信息，包括方法的参数类型、返回值类型等信息。</li></ol><h3 id="_4-2-内省示例" tabindex="-1"><a class="header-anchor" href="#_4-2-内省示例" aria-hidden="true">#</a> 4.2 内省示例</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token comment">// setter / getter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">IntrospectionException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">PropertyDescriptor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntrospectionDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IntrospectionException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">PropertyDescriptor</span> nameDescriptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertyDescriptor</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PropertyDescriptor</span> ageDescriptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertyDescriptor</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> nameDescriptor<span class="token punctuation">.</span><span class="token function">getReadMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> ageDescriptor<span class="token punctuation">.</span><span class="token function">getReadMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Name: &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Age: &quot;</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-内省和反射的区别" tabindex="-1"><a class="header-anchor" href="#_4-3-内省和反射的区别" aria-hidden="true">#</a> 4.3 内省和反射的区别</h3><p>内省和反射都是 Java 中用于操作 JavaBean 属性的机制，但它们有一些本质上的区别。</p><ol><li>操作对象不同：反射是操作类和对象的机制，通过反射可以获取一个类的方法、属性等信息，并对其进行操作；而内省是操作 JavaBean 对象的机制，它允许程序通过反射获取一个 JavaBean 对象的属性、方法等信息，并动态地操作它们。</li><li>操作方式不同：反射是通过 Class 对象来实现的，它可以获取类中所有的方法、属性等信息，并可以通过反射操作这些信息；而内省是通过 BeanInfo 对象来实现的，它可以获取一个 JavaBean 对象中的属性信息，并可以通过内省机制对这些属性进行读写。</li><li>安全性不同：反射机制可以访问类中的所有属性和方法，包括私有属性和方法，因此反射机制的安全性相对较低；而内省机制只能访问公共属性和方法，无法访问私有属性和方法，因此内省机制相对更加安全。</li><li>执行效率不同：反射机制的执行效率较低，因为它需要进行大量的类信息查询和类型转换等操作，这些操作会降低程序的执行效率；而内省机制的执行效率较高，因为它只需要进行少量的类型查询和方法调用等操作，这些操作相对较快。</li></ol><h2 id="附-反射相关类的java-doc" tabindex="-1"><a class="header-anchor" href="#附-反射相关类的java-doc" aria-hidden="true">#</a> 附. 反射相关类的java doc</h2>`,44),r={href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Class.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/reflect/Constructor.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/reflect/Method.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/reflect/Field.html",target:"_blank",rel:"noopener noreferrer"};function m(h,b){const a=l("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[n("a",r,[s("Class"),e(a)])]),n("p",null,[n("a",d,[s("Constructor"),e(a)])]),n("p",null,[n("a",k,[s("Method"),e(a)])]),n("p",null,[n("a",v,[s("Field"),e(a)])])])}const f=t(i,[["render",m],["__file","reflect.html.vue"]]);export{f as default};
