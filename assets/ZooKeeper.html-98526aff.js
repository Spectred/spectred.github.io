import{ab as i,G as o,H as p,E as n,S as a,N as e,ac as t,W as r}from"./framework-11534bf9.js";const l={},c=n("h1",{id:"zookeeper",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#zookeeper","aria-hidden":"true"},"#"),a(" ZooKeeper")],-1),d={href:"http://zookeeper.apache.org/index.html",target:"_blank",rel:"noopener noreferrer"},u=t(`<p>[toc]</p><h2 id="一-zookeeper系统模型" tabindex="-1"><a class="header-anchor" href="#一-zookeeper系统模型" aria-hidden="true">#</a> 一. ZooKeeper系统模型</h2><h4 id="_1-1-znode" tabindex="-1"><a class="header-anchor" href="#_1-1-znode" aria-hidden="true">#</a> 1.1 ZNode</h4><p>在ZooKeeper中，数据信息保存在数据节点上，节点被称为<strong>ZNode</strong>，是ZooKeeper中最小数据单位。</p><p>所有ZNode按照层次化组织，形成ZNode Tree。</p><h5 id="_1-1-1-znode的类型" tabindex="-1"><a class="header-anchor" href="#_1-1-1-znode的类型" aria-hidden="true">#</a> 1.1.1 ZNode的类型</h5><p>持久性节点(Persistent)、临时性节点(Ephemeral)、顺序性节点(Sequential)</p><ul><li><strong>持久节点:</strong> 节点被创建后一直存在服务器，直到删除操作主动清除（例如:/tmp）</li><li><strong>持久顺序节点</strong>: 带有顺序的持久节点。（持久节点后边带有数字后缀表示顺序）(例如/tmp0000000002)</li><li><strong>临时节点</strong>: 当客户端会话结束，节点就会被删除，临时节点不能创建子节点</li><li><strong>临时顺序节点</strong>: 带有顺序的临时节点。（临时节点带有数字后缀表示顺序）</li></ul><p><strong>事务ID(ZXID)</strong></p><p>在ZK中事务是指鞥能够改变ZK服务器状态的操作，包括数据节点的创建删除更新等。</p><p>对于每个事务请求，ZK都会为其分配一个全局唯一的事务ID: <strong>ZXID</strong>，通常是一个64位数字。每个ZXID对应一次更新操作，从ZXID中可以间接是被出ZK处理这些更新操作请求的全局顺序。</p><h5 id="_1-1-2-znode的状态信息" tabindex="-1"><a class="header-anchor" href="#_1-1-2-znode的状态信息" aria-hidden="true">#</a> 1.1.2 ZNode的状态信息</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token function">ls</span> <span class="token parameter variable">-s</span> /zookeeper
<span class="token punctuation">[</span>config, quota<span class="token punctuation">]</span> 											<span class="token comment"># 数据内容</span>
cZxid <span class="token operator">=</span> 0x0														<span class="token comment"># 节点被创建时的ZXID-CreateZxid</span>
ctime <span class="token operator">=</span> Thu Jan 01 08:00:00 CST <span class="token number">1970</span>  <span class="token comment"># 节点创建时间</span>
mZxid <span class="token operator">=</span> 0x0														<span class="token comment"># 节点最后一次修改时的ZXID-ModifiedZxid</span>
mtime <span class="token operator">=</span> Thu Jan 01 08:00:00 CST <span class="token number">1970</span>  <span class="token comment"># 节点最后一次修改时间</span>
pZxid <span class="token operator">=</span> 0x0														<span class="token comment"># 节点的子节点列表最后一次被修改时的ZXID(仅限子节点列表变更才会更新，变更子节点内容不会更新)</span>
cversion <span class="token operator">=</span> <span class="token parameter variable">-2</span>													<span class="token comment"># 节点的版本号</span>
dataVersion <span class="token operator">=</span> <span class="token number">0</span>												<span class="token comment"># 内容版本号</span>
aclVersion <span class="token operator">=</span> <span class="token number">0</span>												<span class="token comment"># ACL版本</span>
ephemeralOwner <span class="token operator">=</span> 0x0									<span class="token comment"># 创建临时节点时的会话SessionID,持久节点时为0</span>
dataLength <span class="token operator">=</span> <span class="token number">0</span>												<span class="token comment"># 数据长度</span>
numChildren <span class="token operator">=</span> <span class="token number">2</span>												<span class="token comment"># 直系子节点数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-watcher" tabindex="-1"><a class="header-anchor" href="#_1-2-watcher" aria-hidden="true">#</a> 1.2 Watcher</h4><p>ZK使用<strong>Watcher机制</strong>实现分布式数据的发布/订阅功能</p><p>ZK允许客户端向服务端注册一个Watch监听，当服务端的一些指定事件触发了这个Watcher，那么就会向指定客户端发送一个事件通知来实现分布式的通知功能。</p><p>ZK的Watcher机制主要包括: <strong>客户端线程</strong>、<strong>客户端WatcherManager</strong>、<strong>ZooKeerper服务器</strong></p><p><strong>流程:</strong></p><ol><li>客户端在向ZK服务器注册的同时，会将Watcher对象存储在客户端的WatchManager当中</li><li>当ZK服务器触发Watcher事件后，会向客户端发送通知</li><li>客户端线程从WatcherManager中取出对应的Watcher对象来执行回调逻辑</li></ol><h4 id="_1-3-acl" tabindex="-1"><a class="header-anchor" href="#_1-3-acl" aria-hidden="true">#</a> 1.3 ACL</h4><p><strong>ACL</strong>(Access Control List)控制机制来保证数据安全.</p><p><strong>Scheme(权限模式):ID(授权对象):Permission(权限)</strong></p><h5 id="_1-3-1-scheme-权限模式" tabindex="-1"><a class="header-anchor" href="#_1-3-1-scheme-权限模式" aria-hidden="true">#</a> 1.3.1 Scheme 权限模式</h5><ol><li><strong>IP</strong>: 通过IP地址粒度来进行权限控制，也可支持按照网段方式进行配置(例如: 192.168.0.220或者 192.168.0.1/24)</li><li><strong>Digest</strong>: 使用“username:password”形式的权限标识进行配置</li><li><strong>World</strong>: 所有用户都可以在不进行权限校验的情况下操作ZK数据，相当于Digest:“world:anyone”</li><li><strong>Super</strong>: 超级用户可以对任意ZK上的数据节点进行任何操作</li></ol><h5 id="_1-3-2-id-授权对象" tabindex="-1"><a class="header-anchor" href="#_1-3-2-id-授权对象" aria-hidden="true">#</a> 1.3.2 ID 授权对象</h5><p>指权限赋予的用户或一个指定实体，例如IP地址或机器等。在不同的权限模式下，授权对象是不同的，授权模式与授权对象的关系</p><table><thead><tr><th style="text-align:center;">权限模式</th><th style="text-align:left;">授权对象</th></tr></thead><tbody><tr><td style="text-align:center;">IP</td><td style="text-align:left;">IP地址或者IP段，例如192.168.0.220或者 192.168.0.1/24</td></tr><tr><td style="text-align:center;">Digest</td><td style="text-align:left;">自定义，username:BASE64(SHA-1(username:password)),例如zs:fafsadgf=</td></tr><tr><td style="text-align:center;">Super</td><td style="text-align:left;">只有一个ID: anyone</td></tr><tr><td style="text-align:center;">Supper</td><td style="text-align:left;">超级用户</td></tr></tbody></table><h5 id="_1-3-3-权限" tabindex="-1"><a class="header-anchor" href="#_1-3-3-权限" aria-hidden="true">#</a> 1.3.3 权限</h5><p><strong>C(CREATE)</strong>: 数据节点的创建权限，允许授权对象在该节点下创建子节点</p><p><strong>R(READ)</strong>: 数据节点的读取权限，允许授权对象访问改数据节点并读取数据内容和子节点列表</p><p><strong>W(WRITE)</strong>: 数据节点的更新权限，允许授权对象对该数据节点进行更新操作</p><p><strong>D(DELETE)</strong>: 子节点的删除权限，允许授权对象删除该数据节点的子节点</p><p><strong>A(ADMIN)</strong>: 数据节点的管理权限，允许授权对象对该数据节点进行ACL相关的设置操作</p><h2 id="二-zookeeper命令操作" tabindex="-1"><a class="header-anchor" href="#二-zookeeper命令操作" aria-hidden="true">#</a> 二. ZooKeeper命令操作</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>zkCli.sh  <span class="token comment"># 连接本地服务器</span>
zkCli.sh <span class="token parameter variable">-server</span> ip:port  <span class="token comment"># 连接指定服务器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-帮助信息" tabindex="-1"><a class="header-anchor" href="#_1-帮助信息" aria-hidden="true">#</a> 1.帮助信息</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token builtin class-name">help</span>
ZooKeeper <span class="token parameter variable">-server</span> host:port -client-configuration properties-file cmd args
	addWatch <span class="token punctuation">[</span>-m mode<span class="token punctuation">]</span> path <span class="token comment"># optional mode is one of [PERSISTENT, PERSISTENT_RECURSIVE] - default is PERSISTENT_RECURSIVE</span>
	addauth scheme auth
	close
	config <span class="token punctuation">[</span>-c<span class="token punctuation">]</span> <span class="token punctuation">[</span>-w<span class="token punctuation">]</span> <span class="token punctuation">[</span>-s<span class="token punctuation">]</span>
	connect host:port
	create <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>-e<span class="token punctuation">]</span> <span class="token punctuation">[</span>-c<span class="token punctuation">]</span> <span class="token punctuation">[</span>-t ttl<span class="token punctuation">]</span> path <span class="token punctuation">[</span>data<span class="token punctuation">]</span> <span class="token punctuation">[</span>acl<span class="token punctuation">]</span>
	delete <span class="token punctuation">[</span>-v version<span class="token punctuation">]</span> path
	deleteall path <span class="token punctuation">[</span>-b batch size<span class="token punctuation">]</span>
	delquota <span class="token punctuation">[</span>-n<span class="token operator">|</span>-b<span class="token punctuation">]</span> path
	get <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>-w<span class="token punctuation">]</span> path
	getAcl <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> path
	getAllChildrenNumber path
	getEphemerals path
	<span class="token function">history</span>
	listquota path
	<span class="token function">ls</span> <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>-w<span class="token punctuation">]</span> <span class="token punctuation">[</span>-R<span class="token punctuation">]</span> path
	printwatches on<span class="token operator">|</span>off
	quit
	reconfig <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>-v version<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>-file path<span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span>-members <span class="token assign-left variable">serverID</span><span class="token operator">=</span>host:port1:port2<span class="token punctuation">;</span>port3<span class="token punctuation">[</span>,<span class="token punctuation">..</span>.<span class="token punctuation">]</span>*<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span>-add <span class="token assign-left variable">serverId</span><span class="token operator">=</span>host:port1:port2<span class="token punctuation">;</span>port3<span class="token punctuation">[</span>,<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">]</span>* <span class="token punctuation">[</span>-remove serverId<span class="token punctuation">[</span>,<span class="token punctuation">..</span>.<span class="token punctuation">]</span>*<span class="token punctuation">]</span>
	redo cmdno
	removewatches path <span class="token punctuation">[</span>-c<span class="token operator">|</span>-d<span class="token operator">|</span>-a<span class="token punctuation">]</span> <span class="token punctuation">[</span>-l<span class="token punctuation">]</span>
	<span class="token builtin class-name">set</span> <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>-v version<span class="token punctuation">]</span> path data
	setAcl <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>-v version<span class="token punctuation">]</span> <span class="token punctuation">[</span>-R<span class="token punctuation">]</span> path acl
	setquota -n<span class="token operator">|</span>-b val path
	<span class="token function">stat</span> <span class="token punctuation">[</span>-w<span class="token punctuation">]</span> path
	<span class="token function">sync</span> path
	version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-创建节点" tabindex="-1"><a class="header-anchor" href="#_2-创建节点" aria-hidden="true">#</a> 2. 创建节点</h3><p><code>create [-s] [-e] [-c] [-t ttl] path [data] [acl]</code></p><p>-s或-e指定节点特性顺序或临时节点，不指定时创建持久节点；acl控制权限控制</p><h4 id="_2-1-创建顺序节点" tabindex="-1"><a class="header-anchor" href="#_2-1-创建顺序节点" aria-hidden="true">#</a> 2.1 创建顺序节点</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> <span class="token number">5</span><span class="token punctuation">]</span> create <span class="token parameter variable">-s</span> /test mydata
Created /test0000000000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-创建临时节点" tabindex="-1"><a class="header-anchor" href="#_2-2-创建临时节点" aria-hidden="true">#</a> 2.2 创建临时节点</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> <span class="token number">6</span><span class="token punctuation">]</span> create <span class="token parameter variable">-e</span> /test-temp mydata
Created /test-temp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端会话结束后自动删除</p><h4 id="_2-3-创建永久节点" tabindex="-1"><a class="header-anchor" href="#_2-3-创建永久节点" aria-hidden="true">#</a> 2.3 创建永久节点</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">]</span> create /test mydata
Created /test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-读取节点" tabindex="-1"><a class="header-anchor" href="#_3-读取节点" aria-hidden="true">#</a> 3. 读取节点</h3><p><strong>列出指定节点下的第一级的所有子节点</strong></p><p><code>ls [-s] [-w] [-R] path</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token function">ls</span> /
<span class="token punctuation">[</span>test, test0000000000, zookeeper<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>获取指定节点的数据内容和属性信息</strong></p><p><code>get [-s] [-w] path</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[zk: localhost:2181(CONNECTED) 15] get -s /test
mydata
cZxid = 0x28
ctime = Sat Dec 04 17:57:23 CST 2021
mZxid = 0x28
mtime = Sat Dec 04 17:57:23 CST 2021
pZxid = 0x28
cversion = 0
dataVersion = 0
aclVersion = 0
ephemeralOwner = 0x0
dataLength = 6
numChildren = 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-更新节点" tabindex="-1"><a class="header-anchor" href="#_4-更新节点" aria-hidden="true">#</a> 4. 更新节点</h3><p><code>set [-s] [-v version] path data</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> <span class="token number">17</span><span class="token punctuation">]</span> <span class="token builtin class-name">set</span> /test qwer

<span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> <span class="token number">19</span><span class="token punctuation">]</span> get <span class="token parameter variable">-s</span> /test
qwer
cZxid <span class="token operator">=</span> 0x28
ctime <span class="token operator">=</span> Sat Dec 04 <span class="token number">17</span>:57:23 CST <span class="token number">2021</span>
mZxid <span class="token operator">=</span> 0x29
mtime <span class="token operator">=</span> Sat Dec 04 <span class="token number">18</span>:02:54 CST <span class="token number">2021</span>
pZxid <span class="token operator">=</span> 0x28
cversion <span class="token operator">=</span> <span class="token number">0</span>
dataVersion <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment"># 数据版本+1</span>
aclVersion <span class="token operator">=</span> <span class="token number">0</span>
ephemeralOwner <span class="token operator">=</span> 0x0
dataLength <span class="token operator">=</span> <span class="token number">4</span>
numChildren <span class="token operator">=</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-删除节点" tabindex="-1"><a class="header-anchor" href="#_5-删除节点" aria-hidden="true">#</a> 5. 删除节点</h3><p><code>delete [-v version] path</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> <span class="token number">21</span><span class="token punctuation">]</span> delete /test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>若删除的节点存在子节点，需要先删除子节点，再删除父节点</p><h2 id="三-应用场景" tabindex="-1"><a class="header-anchor" href="#三-应用场景" aria-hidden="true">#</a> 三. 应用场景</h2><h3 id="_1-数据发布-订阅" tabindex="-1"><a class="header-anchor" href="#_1-数据发布-订阅" aria-hidden="true">#</a> 1. 数据发布/订阅</h3><p>配置</p><p>ZK采用Push / Pull 结合模式: 客户端向服务端注册自己需要关注的节点，一旦该节点的数据发生变更，服务端就会向相应的客户端发送Watcher事件通知，客户端接收到消息通知之后，需要主动到服务端获取最新的数据。</p><p>如果将配置信息存放到ZK上进行集中管理，通常情况下，应用在启动的时候都会主动到ZK服务端上进行一次配置信息的获取，同时在指定节点上注册一个Watcher监听，当配置信息发生变更，服务端都会实时通知到所有订阅的客户端，从而达到实时获取最新配置信息的目的。</p><p><strong>示例: 数据库信息切换-配置中心</strong></p><h4 id="_1-1-配置存储" tabindex="-1"><a class="header-anchor" href="#_1-1-配置存储" aria-hidden="true">#</a> 1.1 配置存储</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> <span class="token number">36</span><span class="token punctuation">]</span> get /configserver/app1/database_config
<span class="token assign-left variable">db.url</span><span class="token operator">=</span>localhost:3306
<span class="token assign-left variable">db.username</span><span class="token operator">=</span>root
<span class="token assign-left variable">db.password</span><span class="token operator">=</span>mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-配置获取" tabindex="-1"><a class="header-anchor" href="#_1-2-配置获取" aria-hidden="true">#</a> 1.2 配置获取</h4><p>集群中每台机器在启动初始化阶段，首先会从上面的ZK配置节点上读取数据库信息，同时客户端还需要在该配置节点上注册一个数据变更的Watcher监听，一旦发生节点数据变更，所有订阅的客户端都能够获取到数据变更通知</p><h4 id="_1-3-配置变更" tabindex="-1"><a class="header-anchor" href="#_1-3-配置变更" aria-hidden="true">#</a> 1.3 配置变更</h4><p>在系统运行中，对ZK中的节点内容更新，ZK通知发送到客户端，每个客户端收到变更通知后，可以重新进行最新数据的获取</p><h3 id="_2-命名服务" tabindex="-1"><a class="header-anchor" href="#_2-命名服务" aria-hidden="true">#</a> 2. 命名服务</h3><p>ZooKeeper提供的命名服务功能能够帮助应用系统通过一个资源引用的方式来实现对资源的定位和使用（顺序节点）</p><p><strong>基本步骤</strong></p><p>在对应分类下创建一个顺序节点，创建完毕后会返回完整的节点名,例如id0000001,客户端添加业务属性即可获取全局唯一ID</p><h3 id="_3-集群管理" tabindex="-1"><a class="header-anchor" href="#_3-集群管理" aria-hidden="true">#</a> 3. 集群管理</h3><p>客户端可以对ZK的数据节点注册Watcher监听(发布/订阅)，临时节点会随着客户端与服务器会话失效删除。</p><p>利用如上两点可以实现集群机器存活监控系统，若监控系统在/clusterservers节点上注册一个Watcher监听，那么但凡进行动态添加机器的操作，就会在/clusterServers节点下创建一个临时节点: /clusterServers/[hostname]，监控系统就能实时检测机器的变动情况。</p><h3 id="_4-master选举" tabindex="-1"><a class="header-anchor" href="#_4-master选举" aria-hidden="true">#</a> 4. Master选举</h3><p>利用ZK会保证客户端无法重复创建一个已经存在的数据节点</p><h3 id="_5-分布式锁" tabindex="-1"><a class="header-anchor" href="#_5-分布式锁" aria-hidden="true">#</a> 5. 分布式锁</h3><p>// TODO 链接到分布式篇</p><h3 id="_6-分布式队列" tabindex="-1"><a class="header-anchor" href="#_6-分布式队列" aria-hidden="true">#</a> 6. 分布式队列</h3><p>// TODO 链接到分布式篇</p><h2 id="四-zab协议" tabindex="-1"><a class="header-anchor" href="#四-zab协议" aria-hidden="true">#</a> 四. ZAB协议</h2><blockquote><p>ZooKeeper中采用<strong>ZAB</strong>(ZooKeeper Atmoic Broadcast ZooKeeper原子消息广播)协议作为<strong>数据一致性</strong>的核心算法</p></blockquote><p>ZAB协议的核心是定义了对于会改变ZK服务器状态的事务请求的处理方式。</p><p>所有事务请求还需有一个全局唯一的Leader服务器来协调处理，其他服务器成为Follower服务器。Leader服务器负责讲一个客户端事务请求转化为一个事务提议（Proposal）,并将该提议分发给集群中所有的Follower服务器，之后Leader服务器需要等待所有Follower服务器反馈，一旦超半数的Follower服务器进行了正确反馈，那么Leder就会再次向所有的Follower服务器分发Commi消息，要求其将前一个提议进行提交</p><h3 id="_1-崩溃恢复模式" tabindex="-1"><a class="header-anchor" href="#_1-崩溃恢复模式" aria-hidden="true">#</a> 1. 崩溃恢复模式</h3><p>当整个服务框架启动过程中，或者是Leader服务器出现网络中断、崩溃退出或者重启等异常情况是，ZAB协议就会进入崩溃服务模式，同时选举产生新的Leader服务器。</p><p>但选举产生了新的Leader服务器，同时集群中已经有过半的机器与该Leader服务器完成了状态同步之后，ZAB协议就会有退出恢复模式。</p><p>其中状态同步是数据同步，用来保证集群中过半的机器能够和Leader服务器的数据状态保持一致</p><h3 id="_2-消息广播模式" tabindex="-1"><a class="header-anchor" href="#_2-消息广播模式" aria-hidden="true">#</a> 2. 消息广播模式</h3><p>当集群中已经有过半的Follower服务器完成了和Leader服务器的状态同步，那么整个服务框架就可以进入消息广播模式。</p><p>当一台同样遵守ZAB协议的服务器启动后加入到集群中，如果此时集群中已经存在一个Leader服务器在负责进行消息广播，那么加入的服务器就会自觉地进入数据恢复模式：找到Leader所在的服务器，并与其进行数据同步，然后一起参与到消息广播流程中去。</p><p>ZooKeeper中值允许唯一的一个Leader服务器来进行事务请求的处理，Leader服务器在接受到客户端的事务请求后，会生成对应的事务提议并发起一轮广播协议，而如果集群中的其他机器收到客户端的事务请求后，那么这些非Leader服务器首先将这个事务请求转发给Leader服务器</p><h3 id="_3-基本特性" tabindex="-1"><a class="header-anchor" href="#_3-基本特性" aria-hidden="true">#</a> 3. 基本特性</h3><p>ZAB协议需要确保哪些已经在Leader服务器上提交的事务最终被所有服务器都提交</p><p>ZAB协议需要确保丢弃哪些只在Leader服务器上被提交的事务</p><p>// TODO....</p><h2 id="五-服务器角色" tabindex="-1"><a class="header-anchor" href="#五-服务器角色" aria-hidden="true">#</a> 五. 服务器角色</h2><p>// TODO....</p><h2 id="六-服务器启动" tabindex="-1"><a class="header-anchor" href="#六-服务器启动" aria-hidden="true">#</a> 六. 服务器启动</h2><p>// TODO...</p><h2 id="七-leader选举" tabindex="-1"><a class="header-anchor" href="#七-leader选举" aria-hidden="true">#</a> 七. Leader选举</h2><p>// TODO...</p><h2 id="x-实战" tabindex="-1"><a class="header-anchor" href="#x-实战" aria-hidden="true">#</a> X. 实战</h2><hr><h2 id="x-实战-1" tabindex="-1"><a class="header-anchor" href="#x-实战-1" aria-hidden="true">#</a> X. 实战</h2>`,111),v={href:"http://zookeeper.apache.org/releases.html",target:"_blank",rel:"noopener noreferrer"},h=t(`<h3 id="_1-单机环境搭建" tabindex="-1"><a class="header-anchor" href="#_1-单机环境搭建" aria-hidden="true">#</a> 1. 单机环境搭建</h3><h4 id="_1-1-环境准备" tabindex="-1"><a class="header-anchor" href="#_1-1-环境准备" aria-hidden="true">#</a> 1.1 环境准备</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 下载</span>
<span class="token function">wget</span> https://downloads.apache.org/zookeeper/zookeeper-3.6.3/apache-zookeeper-3.6.3-bin.tar.gz
<span class="token comment"># 解压</span>
<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> apache-zookeeper-3.6.3-bin.tar.gz
<span class="token comment"># 重命名</span>
<span class="token function">mv</span> apache-zookeeper-3.6.3-bin zookeeper-3.6.3
<span class="token comment"># 创建data目录</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> zookeeper-3.6.3/data
<span class="token comment"># 查看当前目录结构</span>
$ tree /opt/zookeeper/zookeeper-3.6.3 <span class="token parameter variable">-L</span> <span class="token number">1</span>
zookeeper-3.6.3/
├── bin
├── conf
├── data
├── docs
├── lib
├── LICENSE.txt
├── NOTICE.txt
├── README.md
└── README_packaging.md

<span class="token comment"># 重命名默认配置文件</span>
<span class="token function">mv</span> conf/zoo_sample.cfg conf/zoo.cfg

<span class="token comment"># 更改配置</span>
<span class="token comment"># 更改dataDir</span>
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&quot;s/^dataDir=\\/tmp\\/zookeeper/dataDir=\\/opt\\/zookeeper\\/zookeeper-3\\.6\\.3\\/data/g&quot;</span> conf/zoo.cfg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-启动与停止" tabindex="-1"><a class="header-anchor" href="#_1-2-启动与停止" aria-hidden="true">#</a> 1.2 启动与停止</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 启动</span>
$ bin/zkServer.sh start
ZooKeeper JMX enabled by default
Using config: /opt/zookeeper/zookeeper-3.6.3/bin/<span class="token punctuation">..</span>/conf/zoo.cfg
Starting zookeeper <span class="token punctuation">..</span>. STARTED

<span class="token comment"># 查看状态</span>
$ bin/zkServer.sh status
ZooKeeper JMX enabled by default
Using config: /opt/zookeeper/zookeeper-3.6.3/bin/<span class="token punctuation">..</span>/conf/zoo.cfg
Client port found: <span class="token number">2181</span>. Client address: localhost. Client SSL: false.
Mode: standalone

<span class="token comment"># 停止</span>
$ bin/zkServer.sh stop
ZooKeeper JMX enabled by default
Using config: /opt/zookeeper/zookeeper-3.6.3/bin/<span class="token punctuation">..</span>/conf/zoo.cfg
Stopping zookeeper <span class="token punctuation">..</span>. STOPPED

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-伪集群搭建" tabindex="-1"><a class="header-anchor" href="#_2-伪集群搭建" aria-hidden="true">#</a> 2. 伪集群搭建</h3><h4 id="_2-1-环境准备" tabindex="-1"><a class="header-anchor" href="#_2-1-环境准备" aria-hidden="true">#</a> 2.1 环境准备</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建目录zkcluster</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /opt/zookeeper/zkcluster
<span class="token comment"># 解压</span>
<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> apache-zookeeper-3.6.3-bin.tar.gz <span class="token parameter variable">-C</span> zkcluster/
<span class="token comment"># 重命名</span>
<span class="token function">mv</span> apache-zookeeper-3.6.3-bin/ zookeeper01
<span class="token comment"># 复制</span>
<span class="token function">cp</span> <span class="token parameter variable">-r</span> zookeeper01/ zookeeper02
<span class="token function">cp</span> <span class="token parameter variable">-r</span> zookeeper01/ zookeeper03	

<span class="token comment"># 在01、02、03下创建data和logs目录</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> zookeeper01/data<span class="token punctuation">;</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> zookeeper01/data/logs
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> zookeeper02/data<span class="token punctuation">;</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> zookeeper02/data/logs
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> zookeeper03/data<span class="token punctuation">;</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> zookeeper03/data/logs

<span class="token comment"># 查看当前目录结构</span>
$ tree /opt/zookeeper/zkcluster/zookeeper0*/data <span class="token parameter variable">-L</span> <span class="token number">1</span>
/opt/zookeeper/zkcluster/zookeeper01/data
└── logs
/opt/zookeeper/zkcluster/zookeeper02/data
└── logs
/opt/zookeeper/zkcluster/zookeeper03/data
└── logs

<span class="token comment"># 重命名配置文件(3个节点)</span>
<span class="token function">mv</span> conf/zoo_sample.cfg conf/zoo.cfg

<span class="token comment"># 修改zoo.cfg</span>
<span class="token assign-left variable">clientPort</span><span class="token operator">=</span><span class="token number">2181</span>
<span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/opt/zookeeper/zkcluster/zookeeper01/data
<span class="token assign-left variable">dataLogDir</span><span class="token operator">=</span>/opt/zookeeper/zkcluster/zookeeper01/data/logs
---
<span class="token assign-left variable">clientPort</span><span class="token operator">=</span><span class="token number">2182</span>
<span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/opt/zookeeper/zkcluster/zookeeper02/data
<span class="token assign-left variable">dataLogDir</span><span class="token operator">=</span>/opt/zookeeper/zkcluster/zookeeper02/data/logs
---
<span class="token assign-left variable">clientPort</span><span class="token operator">=</span><span class="token number">2183</span>
<span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/opt/zookeeper/zkcluster/zookeeper03/data
<span class="token assign-left variable">dataLogDir</span><span class="token operator">=</span>/opt/zookeeper/zkcluster/zookeeper03/data/logs

<span class="token comment"># ! 创建文件myid</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;1&quot;</span> <span class="token operator">&gt;</span> zookeeper01/data/myid
<span class="token builtin class-name">echo</span> <span class="token string">&quot;2&quot;</span> <span class="token operator">&gt;</span> zookeeper02/data/myid
<span class="token builtin class-name">echo</span> <span class="token string">&quot;3&quot;</span> <span class="token operator">&gt;</span> zookeeper03/data/myid
<span class="token comment"># ! zoo.cfg配置clientPort和集群服务器IP列表</span>
<span class="token comment"># server.服务器ID=服务器IP:服务器之间通信端口:服务器之间投票选举端口</span>
<span class="token assign-left variable">server.1</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1:2881:3881
<span class="token assign-left variable">server.2</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1:2882:3882
<span class="token assign-left variable">server.3</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1:2883:3883
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-启动集群" tabindex="-1"><a class="header-anchor" href="#_2-2-启动集群" aria-hidden="true">#</a> 2.2 启动集群</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>zookeeper01/bin/zkServer.sh start
zookeeper02/bin/zkServer.sh start
zookeeper03/bin/zkServer.sh start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-客户端连接" tabindex="-1"><a class="header-anchor" href="#_3-客户端连接" aria-hidden="true">#</a> 3. 客户端连接</h3><h4 id="_3-1-java客户端" tabindex="-1"><a class="header-anchor" href="#_3-1-java客户端" aria-hidden="true">#</a> 3.1 Java客户端</h4><p>// TODO</p><h4 id="_3-2-zkclient" tabindex="-1"><a class="header-anchor" href="#_3-2-zkclient" aria-hidden="true">#</a> 3.2 ZkClient</h4><p>// TODO</p><h4 id="_3-3-curator" tabindex="-1"><a class="header-anchor" href="#_3-3-curator" aria-hidden="true">#</a> 3.3 Curator</h4><p>// TODO</p>`,17);function m(k,b){const s=r("ExternalLinkIcon");return o(),p("div",null,[c,n("blockquote",null,[n("p",null,[n("a",d,[a("官网"),e(s)])])]),u,n("blockquote",null,[n("p",null,[n("a",v,[a("Apache ZooKeeper™ Releases"),e(s)])])]),h])}const f=i(l,[["render",m],["__file","ZooKeeper.html.vue"]]);export{f as default};
