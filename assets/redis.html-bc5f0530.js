import{_ as r,V as i,W as s,Z as e,a2 as d,Y as t,a3 as a,F as c}from"./framework-d0eb6f2b.js";const l={},n=e("h1",{id:"redis",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#redis","aria-hidden":"true"},"#"),d(" Redis")],-1),h=e("h3",{id:"_1-redis有哪些数据类型",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-redis有哪些数据类型","aria-hidden":"true"},"#"),d(" 1. Redis有哪些数据类型")],-1),_={href:"https://redis.io/docs/data-types/",target:"_blank",rel:"noopener noreferrer"},p={id:"_1-1-string",tabindex:"-1"},u=e("a",{class:"header-anchor",href:"#_1-1-string","aria-hidden":"true"},"#",-1),b={href:"https://redis.io/docs/data-types/strings/",target:"_blank",rel:"noopener noreferrer"},f=e("code",null,"string",-1),g=a("<p>数据结构: <code>SDS</code>,包括<code>len</code>:已用的长度，<code>alloc</code>: 分配的空间长度，<code>flags</code>,<code>buf[]</code>: 实际存储的内容</p><p>为什么不用原生<code>char</code>? <code>SDS</code>记录了使用长度和分配空间大小，避免了遍历，降低开销</p>",2),x={id:"_1-2-list",tabindex:"-1"},k=e("a",{class:"header-anchor",href:"#_1-2-list","aria-hidden":"true"},"#",-1),y={href:"https://redis.io/docs/data-types/",target:"_blank",rel:"noopener noreferrer"},m=e("code",null,"list",-1),R=e("p",null,"应用场景: 消息队列，文章列表",-1),A=e("p",null,"数据结构:",-1),v=e("ul",null,[e("li",null,[d("双向链表(为了避免"),e("code",null,"ziplist"),d("级联更新，采用"),e("code",null,"quicklist"),d("+"),e("code",null,"ziplist"),d(")")]),e("li",null,"压缩列表")],-1),O={id:"_1-3-set",tabindex:"-1"},q=e("a",{class:"header-anchor",href:"#_1-3-set","aria-hidden":"true"},"#",-1),B={href:"https://redis.io/docs/data-types/sets/",target:"_blank",rel:"noopener noreferrer"},F=e("code",null,"set",-1),D=e("p",null,"应用场景: 用户标签，随机数",-1),C=e("p",null,[d("数据结构: 如果存储的都是"),e("code",null,"int"),d("类型，则是"),e("code",null,"int set"),d("，其他为"),e("code",null,"hash table")],-1),E=e("ul",null,[e("li",null,"哈希表"),e("li",null,"整数集合")],-1),S={id:"_1-4-hash",tabindex:"-1"},w=e("a",{class:"header-anchor",href:"#_1-4-hash","aria-hidden":"true"},"#",-1),I={href:"https://redis.io/docs/data-types/hashes/",target:"_blank",rel:"noopener noreferrer"},K=e("code",null,"hash",-1),N=a("<p>数据结构:</p><ul><li>哈希表</li><li>压缩列表</li></ul><p>哈希冲突时采用链式哈希</p><p><strong>何时触发<code>rehash</code>？</strong></p><ul><li>根据hash表的负载因子和能否进行<code>rehash</code>标识(<code>rehashidx</code>)判断</li><li>根据<code>RDB</code>和<code>AOF</code>执行情况，启用或者禁用<code>rehash</code></li><li><code>rehash</code>扩容是扩2倍</li></ul><p><strong>渐进式hash？</strong></p><p>当链长度过大时，采用渐进式rehash：</p><ul><li>两个哈希表(<code>ht[0]</code>和<code>ht[1]</code>)交替使用</li><li>正常时写入到<code>ht[0]</code>,当<code>rehash</code>时将键值迁移到<code>ht[</code>]</li><li>完成后<code>ht[0]</code>释放，将<code>ht[1]</code>地址赋值给<code>ht[0]</code></li></ul>",8),M={id:"_1-5-sorted-set",tabindex:"-1"},z=e("a",{class:"header-anchor",href:"#_1-5-sorted-set","aria-hidden":"true"},"#",-1),L={href:"https://redis.io/docs/data-types/sorted-sets/",target:"_blank",rel:"noopener noreferrer"},W=e("code",null,"sorted set",-1),G=e("p",null,"应用场景: 排行榜，点赞",-1),V=e("p",null,"数据结构：",-1),Y=e("ul",null,[e("li",null,"哈希表: 存member和score的关系"),e("li",null,[d("跳表: 存key (当"),e("code",null,"zset"),d("数据少是用"),e("code",null,"ziplist"),d("，为了省内存)")])],-1),H={id:"_1-6-stream",tabindex:"-1"},P=e("a",{class:"header-anchor",href:"#_1-6-stream","aria-hidden":"true"},"#",-1),Q={href:"https://redis.io/docs/data-types/streams/",target:"_blank",rel:"noopener noreferrer"},j=e("code",null,"Stream",-1),T=e("blockquote",null,[e("p",null,"A Redis stream is a data structure that acts like an append-only log. You can use streams to record and simultaneously syndicate events in real time.")],-1),Z=e("p",null,"类似于消息队列",-1),J={id:"_1-7-geo-hash",tabindex:"-1"},U=e("a",{class:"header-anchor",href:"#_1-7-geo-hash","aria-hidden":"true"},"#",-1),X={href:"https://redis.io/docs/data-types/geospatial/",target:"_blank",rel:"noopener noreferrer"},$=e("code",null,"Geo Hash",-1),ee=e("p",null,"存储地理位置",-1),de={id:"_1-8-bitmap",tabindex:"-1"},oe=e("a",{class:"header-anchor",href:"#_1-8-bitmap","aria-hidden":"true"},"#",-1),te={href:"https://redis.io/docs/data-types/bitmaps/",target:"_blank",rel:"noopener noreferrer"},ae=e("code",null,"bitmap",-1),re=e("p",null,"位图，可用于签到等",-1),ie={id:"_1-9-bitfield",tabindex:"-1"},se=e("a",{class:"header-anchor",href:"#_1-9-bitfield","aria-hidden":"true"},"#",-1),ce={href:"https://redis.io/docs/data-types/bitfields/",target:"_blank",rel:"noopener noreferrer"},le=e("code",null,"bitfield",-1),ne={id:"_1-10-hyperloglog",tabindex:"-1"},he=e("a",{class:"header-anchor",href:"#_1-10-hyperloglog","aria-hidden":"true"},"#",-1),_e={href:"https://redis.io/docs/data-types/hyperloglogs/",target:"_blank",rel:"noopener noreferrer"},pe=e("code",null,"HyperLogLog",-1),ue=e("p",null,"基数近似统计，例如网络的uv",-1),be=e("h4",{id:"_1-11-基于模块进行扩展",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-11-基于模块进行扩展","aria-hidden":"true"},"#"),d(" 1.11 基于模块进行扩展")],-1),fe={href:"https://redis.io/docs/modules/",target:"_blank",rel:"noopener noreferrer"},ge={href:"https://redis.io/docs/stack/bloom/",target:"_blank",rel:"noopener noreferrer"},xe=e("code",null,"RedisBloom",-1),ke={href:"https://github.com/brandur/redis-cell",target:"_blank",rel:"noopener noreferrer"},ye=e("code",null,"redis-cell",-1),me={id:"_2-缓存过期和淘汰策略",tabindex:"-1"},Re=e("a",{class:"header-anchor",href:"#_2-缓存过期和淘汰策略","aria-hidden":"true"},"#",-1),Ae={href:"https://redis.io/docs/manual/eviction/",target:"_blank",rel:"noopener noreferrer"},ve=a('<h4 id="_2-1-过期策略" tabindex="-1"><a class="header-anchor" href="#_2-1-过期策略" aria-hidden="true">#</a> 2.1 过期策略</h4><p>Redis采用定期过期和惰性过期</p><ul><li>定期过期： 每隔一点时间，会扫描一定数量的<code>expires</code>字段中的部分key，并清除已过期的key</li><li>惰性过期： 在key被访问时，如果发现已过期，就从内存中删除</li></ul><h4 id="_2-2-淘汰策略" tabindex="-1"><a class="header-anchor" href="#_2-2-淘汰策略" aria-hidden="true">#</a> 2.2 淘汰策略</h4><p><code>maxmemory</code>：Redis启动时按需申请内存，且Redis不会超过<code>maxmemory</code>，如果系统内存快满了，有<code>swap</code>则<code>swap</code>，无<code>swap</code>则<code>OOM</code>,当趋近<code>maxmemory</code>时则进行缓存淘汰</p><ul><li><code>noeviction </code>: 默认，不驱逐，新写入就报错</li><li><code>allkeys-</code>： 从所有的key中 <ul><li><code>random</code>: 随机淘汰，希望请求符合均匀分布</li><li><code>lru</code>： 最近最少淘汰，不确定时可采用，冷热数据交换</li><li><code>lfu</code>: 最不经常使用</li></ul></li><li><code>volatile-</code>: 从设置了过期时间的key中 <ul><li><code>random</code></li><li><code>lru</code></li><li><code>lfu</code></li><li><code>ttl</code>: 根据过期时间，越早越先淘汰</li></ul></li></ul>',6),Oe={id:"_3-持久化",tabindex:"-1"},qe=e("a",{class:"header-anchor",href:"#_3-持久化","aria-hidden":"true"},"#",-1),Be={href:"https://redis.io/docs/manual/persistence/",target:"_blank",rel:"noopener noreferrer"},Fe=a('<blockquote><p>持久化是指将数据写入到持久存储，例如磁盘</p></blockquote><h4 id="_3-1-有哪几种方式" tabindex="-1"><a class="header-anchor" href="#_3-1-有哪几种方式" aria-hidden="true">#</a> 3.1 有哪几种方式</h4><ul><li><code>No persistence</code></li><li><code>RDB (Redis Databases)</code> : 在指定的时间间隔内执行数据的时间点快照</li><li><code>AOF (Append Only File)</code>: 记录每个写入操作，在服务启动时重放，重建原始数据，当日志变得过大时，Redis可以在后台重写日志</li><li><code>RDB+AOF</code></li></ul><h4 id="_3-2-选择哪种方式" tabindex="-1"><a class="header-anchor" href="#_3-2-选择哪种方式" aria-hidden="true">#</a> 3.2 选择哪种方式</h4><ul><li>不能丢失: <code>RDB+AOF</code></li><li>允许分级丢失: <code>RDB</code></li><li>只用<code>AOF</code>时，选择<code>everysec</code>,在可靠性和性能之间平衡</li></ul><h4 id="_3-3-rdb-bgsave-的执行过程" tabindex="-1"><a class="header-anchor" href="#_3-3-rdb-bgsave-的执行过程" aria-hidden="true">#</a> 3.3 <code>RDB(bgsave)</code>的执行过程</h4><p><code>bgsave </code> 或 <code>save 60 1000 </code>（每60秒至少更改了1000个键则save）,保存到<code>dump.rdb</code>二进制文件</p><ol><li><code>fork</code>主线程得到<code>bgsave</code>子进程</li><li>主线程正常读数据，在写数据时，对数据生成副本并进行修改(<code>COW</code>，写时复制)</li><li><code>bgsave</code>子进程读元数据写入到<code>RDB</code>文件</li></ol><h4 id="_3-4-rdb的优缺点" tabindex="-1"><a class="header-anchor" href="#_3-4-rdb的优缺点" aria-hidden="true">#</a> 3.4 <code>RDB</code>的优缺点</h4><p><strong>优点</strong>:</p><ul><li>二进制文件，体积小易传输，最大化性能，适合灾难恢复，相比<code>AOF</code>更快重启</li></ul><p><strong>缺点</strong>:</p><ul><li>会丢失最后一次快照后的数据</li><li>数据量很大时，<code>fork</code>会耗时</li></ul><h4 id="_3-5-aof的执行过程" tabindex="-1"><a class="header-anchor" href="#_3-5-aof的执行过程" aria-hidden="true">#</a> 3.5 <code>AOF</code>的执行过程</h4><p><code>AOF</code>是写后日志，记录的内容是<code>RESP</code>协议的数据，是命令日志</p><blockquote><p>写后日志: 先执行命令，写入内存后写入日志</p><p>避免额外的检查开销，不阻塞当前写操作</p></blockquote><h4 id="_3-6-aof写回磁盘的策略-appendfsync" tabindex="-1"><a class="header-anchor" href="#_3-6-aof写回磁盘的策略-appendfsync" aria-hidden="true">#</a> 3.6 <code>AOF</code>写回磁盘的策略(<code>appendfsync</code>)</h4><ul><li><p><code>Always</code>: 每个命令执行完成，立刻同步将日志写回磁盘</p></li><li><p><code>EverySec</code>: 每个命令执行完成，先写到<code>AOF</code>内存缓冲，每个1秒写回磁盘</p></li><li><p><code>No</code>: 由操作系统控制何时将内存缓冲写回到磁盘</p><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">写回时机</th><th style="text-align:center;">优点</th><th style="text-align:center;">缺点</th></tr></thead><tbody><tr><td style="text-align:center;"><code>Always</code></td><td style="text-align:center;">同步</td><td style="text-align:center;">可靠，基本不丢</td><td style="text-align:center;">影响性能</td></tr><tr><td style="text-align:center;"><code>EverySec</code></td><td style="text-align:center;">每秒</td><td style="text-align:center;">性能适中</td><td style="text-align:center;">丢失1秒</td></tr><tr><td style="text-align:center;"><code>No</code></td><td style="text-align:center;">OS控制</td><td style="text-align:center;">性能好</td><td style="text-align:center;">丢数据多</td></tr></tbody></table></li></ul><h4 id="_3-7-aof重写机制-rewrite" tabindex="-1"><a class="header-anchor" href="#_3-7-aof重写机制-rewrite" aria-hidden="true">#</a> 3.7 <code>AOF</code>重写机制(<code>rewrite</code>)</h4><blockquote><p>解决日志文件太大的问题</p></blockquote><p>将多次修改的命令，合并一个命令（例如: <code>set k 1</code>,<code> set k 2</code> =&gt; <code>set k 2</code>）</p><p><strong>不阻塞主线程</strong>:</p><ol><li>执行重写时，主线程<code>fork</code>出后台的<code>bgrewriteaof</code>子进程</li><li>Redis将写操作写到AOF缓冲区</li><li>新的AOF重写日志被写到重写日志的缓冲区，等拷贝数据都写完后，重写的最新操作写入到AOF日志</li></ol><h4 id="_3-8-aof的优缺点" tabindex="-1"><a class="header-anchor" href="#_3-8-aof的优缺点" aria-hidden="true">#</a> 3.8 <code>AOF</code>的优缺点</h4><p><strong>优点</strong>:</p><ul><li>配置不同的写回策略保证数据丢失少</li><li>不容易损坏，即使某种原因没写完，<code>redis-check-aof</code>工具能够修复</li><li>AOF日志易解析</li><li>AOF日志可重写</li></ul><p><strong>缺点</strong>:</p><ul><li>AOF文件通常比同一数据集的RDB文件大</li><li>可能会比RDB慢</li></ul><h3 id="_4-高可用-主从复制" tabindex="-1"><a class="header-anchor" href="#_4-高可用-主从复制" aria-hidden="true">#</a> 4. 高可用-主从复制</h3><h4 id="_4-1-主从复制的流程" tabindex="-1"><a class="header-anchor" href="#_4-1-主从复制的流程" aria-hidden="true">#</a> 4.1 主从复制的流程</h4><ol><li>从库执行<code>replica of</code>，通过<code>psync</code>和主库建立连接，协商同步，保存主节点的信息</li><li>主库同步数据(RDB)给从库</li><li>从库清空现有数据，加载RDB</li><li>主库发送<code>Repl Buffer</code>（新写入的命令）给从库，从库加载<code>Repl Buffer</code></li></ol><h4 id="_4-2-如何分担全量复制时的主库压力" tabindex="-1"><a class="header-anchor" href="#_4-2-如何分担全量复制时的主库压力" aria-hidden="true">#</a> 4.2 如何分担全量复制时的主库压力</h4><p>可以通过 <strong>主-从-从</strong>，将主库生成的RDB和传输RDB的压力以级联的方式分散到从库上</p><h4 id="_4-3-主从库间网络断了怎么办" tabindex="-1"><a class="header-anchor" href="#_4-3-主从库间网络断了怎么办" aria-hidden="true">#</a> 4.3 主从库间网络断了怎么办</h4><p>网络断了之后，主从库采用<strong>增量复制</strong>的方式继续同步</p><ul><li>全量复制: 同步所有数据</li><li>增量复制: 把主从网络端连期间主库收到的命令同步从库</li></ul><h3 id="_5-高可用-哨兵" tabindex="-1"><a class="header-anchor" href="#_5-高可用-哨兵" aria-hidden="true">#</a> 5. 高可用-哨兵</h3><blockquote><p>实现主从库切换的关键机制</p></blockquote><h4 id="_5-1-监控" tabindex="-1"><a class="header-anchor" href="#_5-1-监控" aria-hidden="true">#</a> 5.1 监控</h4><p>周期性给所有主从库发送<code>PING</code>,检测是否正常运行</p><p><strong>主观下线</strong>: 单哨兵认为下线</p><p><strong>客观下线</strong>: 超半数哨兵认为下线</p><h4 id="_5-2-选主" tabindex="-1"><a class="header-anchor" href="#_5-2-选主" aria-hidden="true">#</a> 5.2 选主</h4><ul><li>筛选: 根据从库的当前在线状态和历史网络连接状态过滤</li><li>打分: 从库优先级，从库复制进度，从库ID号</li></ul><h4 id="_5-3-通知" tabindex="-1"><a class="header-anchor" href="#_5-3-通知" aria-hidden="true">#</a> 5.3 通知</h4><ul><li>让从库执行<code>Replica of</code>，与新主库同步</li><li>通知客户端，与新主库连接</li></ul><h4 id="_5-4-哨兵集群" tabindex="-1"><a class="header-anchor" href="#_5-4-哨兵集群" aria-hidden="true">#</a> 5.4 哨兵集群</h4><p><code>sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;port&gt; &lt;quorum&gt;</code></p><p>只有订阅同一个频道的应用才能通过发布的消息进行消息交换</p><p><strong>哨兵-主库</strong>: 基于<code>pub/sub</code>机制组成哨兵集群(<code>__sentinel__:hello</code>频道)</p><p><strong>哨兵-从库</strong>: 哨兵向主库发送<code>info</code>命令，得知从库信息，建立连接</p><p><strong>客户端</strong>: 基于<code>pub/sub</code>机制的客户端时间通知</p><h4 id="_5-5-由哪个哨兵执行主从切换" tabindex="-1"><a class="header-anchor" href="#_5-5-由哪个哨兵执行主从切换" aria-hidden="true">#</a> 5.5 由哪个哨兵执行主从切换</h4><p>发起投票，多数为leader</p><h3 id="_6-redis-cluster-分片集群" tabindex="-1"><a class="header-anchor" href="#_6-redis-cluster-分片集群" aria-hidden="true">#</a> 6. <code>Redis Cluster</code>(分片集群)</h3><blockquote><p>为了保存大量数据，由两种扩容方案：1.升级单Redis实例的资源配置，2.增加Redis实例个数</p></blockquote><h4 id="_6-1-数据切片和实例的对应分布关系" tabindex="-1"><a class="header-anchor" href="#_6-1-数据切片和实例的对应分布关系" aria-hidden="true">#</a> 6.1 数据切片和实例的对应分布关系</h4><p><code>Redis Cluster</code>采用哈希槽(<code>hash slot</code>)来处理数据和实例之间的关系</p><p><code>CRC16(KEY) % 16384 = n</code></p><p>其中: <code>CRC16 表示CRC16算法得到一个16bit的值，16385个哈希槽，n表示对应的实例</code></p><h4 id="_6-2-客户端如何定位数据" tabindex="-1"><a class="header-anchor" href="#_6-2-客户端如何定位数据" aria-hidden="true">#</a> 6.2 客户端如何定位数据</h4><p>Redis实例会把自己的哈希槽信息通过<code>Gossip</code>发送给和它相连的其他实例，客户端收到哈希槽信息缓存在本地，请求时先算哈希槽</p><p><code>hash slot</code>可能会重新分配: 1.实例由新增或删除，2.为了负载均衡</p><h4 id="_6-3-moved-重定向-和-ask" tabindex="-1"><a class="header-anchor" href="#_6-3-moved-重定向-和-ask" aria-hidden="true">#</a> 6.3 <code>Moved</code>（重定向）和 <code>ASK</code></h4><p>客户端给一个实例发送数据读写操作时，实例上没有相应数据，客户端要再给一个新实例发送操作指令</p><p>假设<code>hash slot</code>重新分配，数据由<code>slot 1</code>迁移到<code>slot 2</code>，当客户端访问数据时，先从本地缓存中读到<code>slot 1</code>,</p><p>如果<code>slot 1</code>已迁移到<code>slot 2</code>，此时实例1将返回<code>Moved 1010 ip:port</code>，客户端再次请求到实例2，并更新本地缓存；</p><p>如果正在迁移中(部分迁移)，实例1将返回客户端<code>ASK 100 ip:port</code>，</p><blockquote><p><code>ASK</code>表示<code>slot</code>数据还在迁移中，或者把锁请求的数据的最新实例地址返回给客户端</p></blockquote><p>此时客户端向新实例发送<code>ASKING</code>,然后再发操作命令</p><blockquote><p><code>Moved</code>: 会更新客户端缓存，永久向新实例发请求</p><p><code>Ask</code>： 不会更新客户端缓存，发一次请求给实例</p></blockquote><h4 id="_6-4-如何扩容-缩容" tabindex="-1"><a class="header-anchor" href="#_6-4-如何扩容-缩容" aria-hidden="true">#</a> 6.4 如何扩容/缩容</h4><p>通过命令<code>redis-cli --cluster</code></p><h4 id="_6-5-什么是副本漂移" tabindex="-1"><a class="header-anchor" href="#_6-5-什么是副本漂移" aria-hidden="true">#</a> 6.5 什么是副本漂移</h4><p>当master挂后，只有一个从机，从其他master中的多个(&gt;=2)从机中选一个做主从</p>',75),De={id:"_6-6-为什么是16483个哈希槽",tabindex:"-1"},Ce=e("a",{class:"header-anchor",href:"#_6-6-为什么是16483个哈希槽","aria-hidden":"true"},"#",-1),Ee={href:"https://github.com/redis/redis/issues/2576",target:"_blank",rel:"noopener noreferrer"},Se=a('<ul><li><p>如果更多: Redis发送心跳包所有槽信息，使用16383K个会产生2kb的文件，更节省空间，一般来说，Redis集群不会超过1000个，16384个槽位足够用</p></li><li><p>如果更少: 8192个，节省的空间不多，且哈希冲突大</p></li></ul><h3 id="_7-redis为什么快" tabindex="-1"><a class="header-anchor" href="#_7-redis为什么快" aria-hidden="true">#</a> 7. Redis为什么快</h3><figure><img src="https://pbs.twimg.com/media/FMx3JZRUYAIWWKq?format=jpg&amp;name=4096x4096" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_7-1-基于内存存储" tabindex="-1"><a class="header-anchor" href="#_7-1-基于内存存储" aria-hidden="true">#</a> 7.1 基于内存存储</h4><p>内存读写优于磁盘</p><h4 id="_7-2-线程模型-单线程、多路复用" tabindex="-1"><a class="header-anchor" href="#_7-2-线程模型-单线程、多路复用" aria-hidden="true">#</a> 7.2 线程模型(单线程、多路复用)</h4><p>Redis的网络IO和键值对读写时单线程的，避免了多线程的开销，采用了<strong>多路复用机制</strong></p><blockquote><p>多路复用</p></blockquote><h4 id="_7-3-高效的数据结构" tabindex="-1"><a class="header-anchor" href="#_7-3-高效的数据结构" aria-hidden="true">#</a> 7.3 高效的数据结构</h4><h3 id="_8-redis只有单线程吗" tabindex="-1"><a class="header-anchor" href="#_8-redis只有单线程吗" aria-hidden="true">#</a> 8. Redis只有单线程吗？</h3><p>Redis中的网络IO，键值对读写是单线程，RDB、AOF等是其他线程，</p><p>Redis6.0 后采用网络I/O多线程出里网络请求，对于键值对读写仍是单线程</p><h3 id="_9-redis6-0和7-0的新特性" tabindex="-1"><a class="header-anchor" href="#_9-redis6-0和7-0的新特性" aria-hidden="true">#</a> 9. Redis6.0和7.0的新特性</h3><h3 id="_10-缓存异常" tabindex="-1"><a class="header-anchor" href="#_10-缓存异常" aria-hidden="true">#</a> 10. 缓存异常</h3><h4 id="_10-1-缓存雪崩" tabindex="-1"><a class="header-anchor" href="#_10-1-缓存雪崩" aria-hidden="true">#</a> 10.1 缓存雪崩</h4><p>突然间大量的key失效，或者redis重启，大量的请求打到数据库</p><p><strong>解决方案</strong>：</p><ul><li>key设置均匀的过期时间</li><li>redis宕机的情况，要采用高可用方案</li></ul><h4 id="_10-2-缓存击穿" tabindex="-1"><a class="header-anchor" href="#_10-2-缓存击穿" aria-hidden="true">#</a> 10.2 缓存击穿</h4><p>某个热点key过期的瞬间，大量请求打到数据库</p><p><strong>解决方案</strong>:</p><ul><li>永不过期</li><li>互斥锁方案，在失效时不立即加载数据库， 而是使用<code>setnx</code>等成功的时候加载缓存和数据库</li></ul><h4 id="_10-3-缓存穿透" tabindex="-1"><a class="header-anchor" href="#_10-3-缓存穿透" aria-hidden="true">#</a> 10.3 缓存穿透</h4><p>查询不存在的key,数据库中也不存在(穿透到数据库)，导致数据库压力过大甚至宕机</p><p><strong>解决方案</strong>:</p><ul><li>对查询结果为空的情况也进行缓存（空值或者默认值），ttl短些或者有数据时删除，但是会导致太多空值占用空间</li><li>引入布隆过滤器，不存在则返回</li></ul><h4 id="_10-4-bigkey" tabindex="-1"><a class="header-anchor" href="#_10-4-bigkey" aria-hidden="true">#</a> 10.4 <code>BigKey</code></h4><h4 id="_10-5-hotkey" tabindex="-1"><a class="header-anchor" href="#_10-5-hotkey" aria-hidden="true">#</a> 10.5 <code>HotKey</code></h4><h3 id="_11-缓存和数据库的一致性" tabindex="-1"><a class="header-anchor" href="#_11-缓存和数据库的一致性" aria-hidden="true">#</a> 11. 缓存和数据库的一致性</h3>',29),we={href:"https://mp.weixin.qq.com/s/4W7vmICGx6a_WX701zxgPQ",target:"_blank",rel:"noopener noreferrer"},Ie=a('<ul><li><p>延时双删</p><p>更新时先删除缓存，再更新数据库，等一段时间后再删除缓存。但是需要评估延时多久，在分布式高并发情况下很难评估</p></li><li><p>引入消息队列</p><p>先更新数据库，MySQL产生<code>binlog</code>,使用Canal订阅<code>binlog</code>，将消息发送到MQ，通过ack异步重试保证删除缓存</p></li></ul><h3 id="_12-基于redis的分布式锁" tabindex="-1"><a class="header-anchor" href="#_12-基于redis的分布式锁" aria-hidden="true">#</a> 12. 基于Redis的分布式锁</h3><h4 id="_12-1-sexnx-lock-val-del-lock" tabindex="-1"><a class="header-anchor" href="#_12-1-sexnx-lock-val-del-lock" aria-hidden="true">#</a> 12.1 <code>sexnx lock val / del lock</code></h4><p>如果解锁异常，会发生死锁 =&gt; 设置过期时间</p><h4 id="_12-2-setnx-lock-val-expire-lock-n" tabindex="-1"><a class="header-anchor" href="#_12-2-setnx-lock-val-expire-lock-n" aria-hidden="true">#</a> 12.2 <code>setnx lock val / expire lock n</code></h4><p>不能保证原子性</p><h4 id="_12-3-set-lock-uuid-ex-n-nx-lua-get-del" tabindex="-1"><a class="header-anchor" href="#_12-3-set-lock-uuid-ex-n-nx-lua-get-del" aria-hidden="true">#</a> 12.3 <code>set lock $uuid ex n nx / lua:get+del</code></h4><p>锁的时间不好评估 =&gt; 增加守护进程续期</p>',8),Ke={id:"_12-4-redisson",tabindex:"-1"},Ne=e("a",{class:"header-anchor",href:"#_12-4-redisson","aria-hidden":"true"},"#",-1),Me={href:"https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},ze=e("p",null,"通过Lua脚本(原子性)，对hash(锁的存储结构)进行增减(可重入)，采用看门狗机制进行续期，释放锁是采用发布/订阅的方式",-1),Le={id:"_12-5-redlock",tabindex:"-1"},We=e("a",{class:"header-anchor",href:"#_12-5-redlock","aria-hidden":"true"},"#",-1),Ge={href:"https://github.com/wujunwei/redlock",target:"_blank",rel:"noopener noreferrer"},Ve=e("blockquote",null,[e("p",null,[d("当发生主从切换时锁失效，采用"),e("code",null,"redlock"),d("方案（前提: 至少有5个主库实例）")])],-1),Ye=e("p",null,[d("客户端获取当前时间戳"),e("code",null,"t1"),d("，依次向5个redis实例发起加锁请求，且每个请求有超时时间。")],-1),He=e("p",null,"如果某一个失败，则立即向下一个申请；",-1),Pe=e("p",null,[d("如果大于半数个锁成功，则获取时间戳"),e("code",null,"t2")],-1),Qe=e("p",null,"加锁不成功时则通过lua向全部节点发起释放锁请求",-1);function je(Te,Ze){const o=c("ExternalLinkIcon");return i(),s("div",null,[n,h,e("blockquote",null,[e("p",null,[e("a",_,[d("Redis Data Types"),t(o)])])]),e("h4",p,[u,d(" 1.1 "),e("a",b,[f,t(o)])]),g,e("h4",x,[k,d(" 1.2 "),e("a",y,[m,t(o)])]),R,A,v,e("h4",O,[q,d(" 1.3 "),e("a",B,[F,t(o)])]),D,C,E,e("h4",S,[w,d(" 1.4 "),e("a",I,[K,t(o)])]),N,e("h4",M,[z,d(" 1.5 "),e("a",L,[W,t(o)])]),G,V,Y,e("h4",H,[P,d(" 1.6 "),e("a",Q,[j,t(o)])]),T,Z,e("h4",J,[U,d(" 1.7 "),e("a",X,[$,t(o)])]),ee,e("h4",de,[oe,d(" 1.8 "),e("a",te,[ae,t(o)])]),re,e("h4",ie,[se,d(" 1.9 "),e("a",ce,[le,t(o)])]),e("h4",ne,[he,d(" 1.10 "),e("a",_e,[pe,t(o)])]),ue,be,e("blockquote",null,[e("p",null,[e("a",fe,[d("Redis Modules"),t(o)])])]),e("ul",null,[e("li",null,[e("a",ge,[xe,t(o)]),d(": 布隆过滤器")]),e("li",null,[e("a",ke,[ye,t(o)]),d(": 用于限流")])]),e("h3",me,[Re,d(" 2. "),e("a",Ae,[d("缓存过期和淘汰策略"),t(o)])]),ve,e("h3",Oe,[qe,d(" 3. "),e("a",Be,[d("持久化"),t(o)])]),Fe,e("h4",De,[Ce,d(" 6.6 "),e("a",Ee,[d("为什么是16483个哈希槽"),t(o)])]),Se,e("blockquote",null,[e("p",null,[d("👍🏻"),e("a",we,[d("缓存和数据库一致性问题，看这篇就够了"),t(o)]),d(" 缓存常用的读写模式是旁路缓存: 先读缓存，没有时再读数据库")])]),Ie,e("h4",Ke,[Ne,d(" 12.4 "),e("a",Me,[d("Redisson"),t(o)])]),ze,e("h4",Le,[We,d(" 12.5 "),e("a",Ge,[d("redlock"),t(o)])]),Ve,Ye,He,Pe,Qe])}const Ue=r(l,[["render",je],["__file","redis.html.vue"]]);export{Ue as default};
